
Neo-6M.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ae8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08003c70  08003c70  00013c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003da0  08003da0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003da0  08003da0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003da0  08003da0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003da0  08003da0  00013da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003da4  08003da4  00013da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  2000000c  08003db4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  08003db4  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab2a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a64  00000000  00000000  0002ab66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  0002c5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d0  00000000  00000000  0002cd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1a1  00000000  00000000  0002d408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a9f8  00000000  00000000  000475a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098685  00000000  00000000  00051fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea626  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cbc  00000000  00000000  000ea678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c58 	.word	0x08003c58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003c58 	.word	0x08003c58

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001dc:	f000 faa2 	bl	8000724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e0:	f000 f816 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e4:	f000 f8ca 	bl	800037c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001e8:	f000 f868 	bl	80002bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001ec:	f000 f896 	bl	800031c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  ClearBuffer();
 80001f0:	f000 f964 	bl	80004bc <ClearBuffer>

    /* USER CODE BEGIN 3 */

	  //HAL_Delay(3000);
	  //HAL_UART_Transmit(&huart2, (uint8_t*)". ", 2, 10);
	  ClearBuffer();
 80001f4:	f000 f962 	bl	80004bc <ClearBuffer>
	  HAL_UART_Receive_IT(&huart1, RecievedData, 700);
 80001f8:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80001fc:	4902      	ldr	r1, [pc, #8]	; (8000208 <main+0x30>)
 80001fe:	4803      	ldr	r0, [pc, #12]	; (800020c <main+0x34>)
 8000200:	f002 fbaf 	bl	8002962 <HAL_UART_Receive_IT>
	  ClearBuffer();
 8000204:	e7f6      	b.n	80001f4 <main+0x1c>
 8000206:	bf00      	nop
 8000208:	2000002c 	.word	0x2000002c
 800020c:	200002ec 	.word	0x200002ec

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b09c      	sub	sp, #112	; 0x70
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800021a:	2228      	movs	r2, #40	; 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f003 fd12 	bl	8003c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]
 800022e:	609a      	str	r2, [r3, #8]
 8000230:	60da      	str	r2, [r3, #12]
 8000232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000234:	463b      	mov	r3, r7
 8000236:	2234      	movs	r2, #52	; 0x34
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f003 fd04 	bl	8003c48 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000240:	2302      	movs	r3, #2
 8000242:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000244:	2301      	movs	r3, #1
 8000246:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000248:	2310      	movs	r3, #16
 800024a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024c:	2302      	movs	r3, #2
 800024e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000250:	2300      	movs	r3, #0
 8000252:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000254:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000258:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800025e:	4618      	mov	r0, r3
 8000260:	f000 fdd8 	bl	8000e14 <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800026a:	f000 f945 	bl	80004f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026e:	230f      	movs	r3, #15
 8000270:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000272:	2302      	movs	r3, #2
 8000274:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000284:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fe00 	bl	8001e90 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000296:	f000 f92f 	bl	80004f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800029a:	2301      	movs	r3, #1
 800029c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800029e:	2300      	movs	r3, #0
 80002a0:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a2:	463b      	mov	r3, r7
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 f829 	bl	80022fc <HAL_RCCEx_PeriphCLKConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80002b0:	f000 f922 	bl	80004f8 <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3770      	adds	r7, #112	; 0x70
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002c0:	4b14      	ldr	r3, [pc, #80]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002c2:	4a15      	ldr	r2, [pc, #84]	; (8000318 <MX_USART1_UART_Init+0x5c>)
 80002c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002d4:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002e2:	220c      	movs	r2, #12
 80002e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <MX_USART1_UART_Init+0x58>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002fe:	4805      	ldr	r0, [pc, #20]	; (8000314 <MX_USART1_UART_Init+0x58>)
 8000300:	f002 f98e 	bl	8002620 <HAL_UART_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800030a:	f000 f8f5 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	200002ec 	.word	0x200002ec
 8000318:	40013800 	.word	0x40013800

0800031c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000320:	4b14      	ldr	r3, [pc, #80]	; (8000374 <MX_USART2_UART_Init+0x58>)
 8000322:	4a15      	ldr	r2, [pc, #84]	; (8000378 <MX_USART2_UART_Init+0x5c>)
 8000324:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000326:	4b13      	ldr	r3, [pc, #76]	; (8000374 <MX_USART2_UART_Init+0x58>)
 8000328:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800032c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800032e:	4b11      	ldr	r3, [pc, #68]	; (8000374 <MX_USART2_UART_Init+0x58>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <MX_USART2_UART_Init+0x58>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800033a:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <MX_USART2_UART_Init+0x58>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <MX_USART2_UART_Init+0x58>)
 8000342:	220c      	movs	r2, #12
 8000344:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000346:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <MX_USART2_UART_Init+0x58>)
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800034c:	4b09      	ldr	r3, [pc, #36]	; (8000374 <MX_USART2_UART_Init+0x58>)
 800034e:	2200      	movs	r2, #0
 8000350:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000352:	4b08      	ldr	r3, [pc, #32]	; (8000374 <MX_USART2_UART_Init+0x58>)
 8000354:	2200      	movs	r2, #0
 8000356:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <MX_USART2_UART_Init+0x58>)
 800035a:	2200      	movs	r2, #0
 800035c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800035e:	4805      	ldr	r0, [pc, #20]	; (8000374 <MX_USART2_UART_Init+0x58>)
 8000360:	f002 f95e 	bl	8002620 <HAL_UART_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800036a:	f000 f8c5 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000374 	.word	0x20000374
 8000378:	40004400 	.word	0x40004400

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08a      	sub	sp, #40	; 0x28
 8000380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	f107 0314 	add.w	r3, r7, #20
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000392:	4b2b      	ldr	r3, [pc, #172]	; (8000440 <MX_GPIO_Init+0xc4>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a2a      	ldr	r2, [pc, #168]	; (8000440 <MX_GPIO_Init+0xc4>)
 8000398:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800039c:	6153      	str	r3, [r2, #20]
 800039e:	4b28      	ldr	r3, [pc, #160]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003a6:	613b      	str	r3, [r7, #16]
 80003a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003aa:	4b25      	ldr	r3, [pc, #148]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a24      	ldr	r2, [pc, #144]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003b4:	6153      	str	r3, [r2, #20]
 80003b6:	4b22      	ldr	r3, [pc, #136]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c2:	4b1f      	ldr	r3, [pc, #124]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a1e      	ldr	r2, [pc, #120]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d6:	60bb      	str	r3, [r7, #8]
 80003d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003da:	4b19      	ldr	r3, [pc, #100]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a18      	ldr	r2, [pc, #96]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003e4:	6153      	str	r3, [r2, #20]
 80003e6:	4b16      	ldr	r3, [pc, #88]	; (8000440 <MX_GPIO_Init+0xc4>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f8:	4812      	ldr	r0, [pc, #72]	; (8000444 <MX_GPIO_Init+0xc8>)
 80003fa:	f000 fcf3 	bl	8000de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000404:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800040e:	f107 0314 	add.w	r3, r7, #20
 8000412:	4619      	mov	r1, r3
 8000414:	480c      	ldr	r0, [pc, #48]	; (8000448 <MX_GPIO_Init+0xcc>)
 8000416:	f000 fb73 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800041a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800041e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000420:	2301      	movs	r3, #1
 8000422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	2300      	movs	r3, #0
 8000426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000428:	2300      	movs	r3, #0
 800042a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800042c:	f107 0314 	add.w	r3, r7, #20
 8000430:	4619      	mov	r1, r3
 8000432:	4804      	ldr	r0, [pc, #16]	; (8000444 <MX_GPIO_Init+0xc8>)
 8000434:	f000 fb64 	bl	8000b00 <HAL_GPIO_Init>

}
 8000438:	bf00      	nop
 800043a:	3728      	adds	r7, #40	; 0x28
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000
 8000444:	48000400 	.word	0x48000400
 8000448:	48000800 	.word	0x48000800

0800044c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	// This has been soft defined in HAL, and can be redefined here.
	HAL_UART_Receive_IT(&huart1, RecievedData, 300);
 8000454:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000458:	4913      	ldr	r1, [pc, #76]	; (80004a8 <HAL_UART_RxCpltCallback+0x5c>)
 800045a:	4814      	ldr	r0, [pc, #80]	; (80004ac <HAL_UART_RxCpltCallback+0x60>)
 800045c:	f002 fa81 	bl	8002962 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, (uint8_t*)"Interrupt received data: ", 25, 100);
 8000460:	2364      	movs	r3, #100	; 0x64
 8000462:	2219      	movs	r2, #25
 8000464:	4912      	ldr	r1, [pc, #72]	; (80004b0 <HAL_UART_RxCpltCallback+0x64>)
 8000466:	4813      	ldr	r0, [pc, #76]	; (80004b4 <HAL_UART_RxCpltCallback+0x68>)
 8000468:	f002 f928 	bl	80026bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, RecievedData,  strlen(RecievedData), 100);
 800046c:	480e      	ldr	r0, [pc, #56]	; (80004a8 <HAL_UART_RxCpltCallback+0x5c>)
 800046e:	f7ff feab 	bl	80001c8 <strlen>
 8000472:	4603      	mov	r3, r0
 8000474:	b29a      	uxth	r2, r3
 8000476:	2364      	movs	r3, #100	; 0x64
 8000478:	490b      	ldr	r1, [pc, #44]	; (80004a8 <HAL_UART_RxCpltCallback+0x5c>)
 800047a:	480e      	ldr	r0, [pc, #56]	; (80004b4 <HAL_UART_RxCpltCallback+0x68>)
 800047c:	f002 f91e 	bl	80026bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n\r\n", 2, 100);
 8000480:	2364      	movs	r3, #100	; 0x64
 8000482:	2202      	movs	r2, #2
 8000484:	490c      	ldr	r1, [pc, #48]	; (80004b8 <HAL_UART_RxCpltCallback+0x6c>)
 8000486:	480b      	ldr	r0, [pc, #44]	; (80004b4 <HAL_UART_RxCpltCallback+0x68>)
 8000488:	f002 f918 	bl	80026bc <HAL_UART_Transmit>
	memset(RecievedData,0, 30);
 800048c:	221e      	movs	r2, #30
 800048e:	2100      	movs	r1, #0
 8000490:	4805      	ldr	r0, [pc, #20]	; (80004a8 <HAL_UART_RxCpltCallback+0x5c>)
 8000492:	f003 fbd9 	bl	8003c48 <memset>
	HAL_UART_Receive_IT (&huart1, RecievedData, 30);		//re-starting interrupt
 8000496:	221e      	movs	r2, #30
 8000498:	4903      	ldr	r1, [pc, #12]	; (80004a8 <HAL_UART_RxCpltCallback+0x5c>)
 800049a:	4804      	ldr	r0, [pc, #16]	; (80004ac <HAL_UART_RxCpltCallback+0x60>)
 800049c:	f002 fa61 	bl	8002962 <HAL_UART_Receive_IT>
	}
 80004a0:	bf00      	nop
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	2000002c 	.word	0x2000002c
 80004ac:	200002ec 	.word	0x200002ec
 80004b0:	08003c70 	.word	0x08003c70
 80004b4:	20000374 	.word	0x20000374
 80004b8:	08003c8c 	.word	0x08003c8c

080004bc <ClearBuffer>:

void ClearBuffer(void){
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	// Clear RN2483 UART buffer before main code execution.
	// HAL_TIMEOUT is received when HAL_UART_Receive is  not done receiving.
	// huart->TxXferCount will then contain the value of bytes left to be received.
	// If size of received data is less than 1 byte (= no data), HAL_TIMEOUT will be returned
	ret = HAL_OK;
 80004c0:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <ClearBuffer+0x30>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	701a      	strb	r2, [r3, #0]
	while (ret != HAL_TIMEOUT) ret = HAL_UART_Receive(&huart1, c, 1, 100);	//RN2483 serial
 80004c6:	e009      	b.n	80004dc <ClearBuffer+0x20>
 80004c8:	2364      	movs	r3, #100	; 0x64
 80004ca:	2201      	movs	r2, #1
 80004cc:	4908      	ldr	r1, [pc, #32]	; (80004f0 <ClearBuffer+0x34>)
 80004ce:	4809      	ldr	r0, [pc, #36]	; (80004f4 <ClearBuffer+0x38>)
 80004d0:	f002 f97e 	bl	80027d0 <HAL_UART_Receive>
 80004d4:	4603      	mov	r3, r0
 80004d6:	461a      	mov	r2, r3
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <ClearBuffer+0x30>)
 80004da:	701a      	strb	r2, [r3, #0]
 80004dc:	4b03      	ldr	r3, [pc, #12]	; (80004ec <ClearBuffer+0x30>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	d1f1      	bne.n	80004c8 <ClearBuffer+0xc>
}
 80004e4:	bf00      	nop
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000028 	.word	0x20000028
 80004f0:	200002e8 	.word	0x200002e8
 80004f4:	200002ec 	.word	0x200002ec

080004f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
}
 80004fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000500:	e7fe      	b.n	8000500 <Error_Handler+0x8>
	...

08000504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <HAL_MspInit+0x44>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <HAL_MspInit+0x44>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6193      	str	r3, [r2, #24]
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <HAL_MspInit+0x44>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <HAL_MspInit+0x44>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	4a08      	ldr	r2, [pc, #32]	; (8000548 <HAL_MspInit+0x44>)
 8000528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052c:	61d3      	str	r3, [r2, #28]
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_MspInit+0x44>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800053a:	2007      	movs	r0, #7
 800053c:	f000 fa28 	bl	8000990 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40021000 	.word	0x40021000

0800054c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08c      	sub	sp, #48	; 0x30
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 031c 	add.w	r3, r7, #28
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a33      	ldr	r2, [pc, #204]	; (8000638 <HAL_UART_MspInit+0xec>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d132      	bne.n	80005d4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800056e:	4b33      	ldr	r3, [pc, #204]	; (800063c <HAL_UART_MspInit+0xf0>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	4a32      	ldr	r2, [pc, #200]	; (800063c <HAL_UART_MspInit+0xf0>)
 8000574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000578:	6193      	str	r3, [r2, #24]
 800057a:	4b30      	ldr	r3, [pc, #192]	; (800063c <HAL_UART_MspInit+0xf0>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000582:	61bb      	str	r3, [r7, #24]
 8000584:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b2d      	ldr	r3, [pc, #180]	; (800063c <HAL_UART_MspInit+0xf0>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a2c      	ldr	r2, [pc, #176]	; (800063c <HAL_UART_MspInit+0xf0>)
 800058c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b2a      	ldr	r3, [pc, #168]	; (800063c <HAL_UART_MspInit+0xf0>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800059a:	617b      	str	r3, [r7, #20]
 800059c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800059e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ac:	2303      	movs	r3, #3
 80005ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005b0:	2307      	movs	r3, #7
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	f107 031c 	add.w	r3, r7, #28
 80005b8:	4619      	mov	r1, r3
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005be:	f000 fa9f 	bl	8000b00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2025      	movs	r0, #37	; 0x25
 80005c8:	f000 f9ed 	bl	80009a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005cc:	2025      	movs	r0, #37	; 0x25
 80005ce:	f000 fa06 	bl	80009de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005d2:	e02d      	b.n	8000630 <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a19      	ldr	r2, [pc, #100]	; (8000640 <HAL_UART_MspInit+0xf4>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d128      	bne.n	8000630 <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <HAL_UART_MspInit+0xf0>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	4a16      	ldr	r2, [pc, #88]	; (800063c <HAL_UART_MspInit+0xf0>)
 80005e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e8:	61d3      	str	r3, [r2, #28]
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <HAL_UART_MspInit+0xf0>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <HAL_UART_MspInit+0xf0>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a10      	ldr	r2, [pc, #64]	; (800063c <HAL_UART_MspInit+0xf0>)
 80005fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000600:	6153      	str	r3, [r2, #20]
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <HAL_UART_MspInit+0xf0>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800060e:	230c      	movs	r3, #12
 8000610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000612:	2302      	movs	r3, #2
 8000614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800061e:	2307      	movs	r3, #7
 8000620:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4619      	mov	r1, r3
 8000628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062c:	f000 fa68 	bl	8000b00 <HAL_GPIO_Init>
}
 8000630:	bf00      	nop
 8000632:	3730      	adds	r7, #48	; 0x30
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40013800 	.word	0x40013800
 800063c:	40021000 	.word	0x40021000
 8000640:	40004400 	.word	0x40004400

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <NMI_Handler+0x4>

0800064a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <HardFault_Handler+0x4>

08000650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <MemManage_Handler+0x4>

08000656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <BusFault_Handler+0x4>

0800065c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <UsageFault_Handler+0x4>

08000662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000690:	f000 f88e 	bl	80007b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800069c:	4802      	ldr	r0, [pc, #8]	; (80006a8 <USART1_IRQHandler+0x10>)
 800069e:	f002 f9a5 	bl	80029ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200002ec 	.word	0x200002ec

080006ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <SystemInit+0x20>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b6:	4a05      	ldr	r2, [pc, #20]	; (80006cc <SystemInit+0x20>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000708 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d4:	f7ff ffea 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <LoopForever+0x6>)
  ldr r1, =_edata
 80006da:	490d      	ldr	r1, [pc, #52]	; (8000710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006dc:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <LoopForever+0xe>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e0:	e002      	b.n	80006e8 <LoopCopyDataInit>

080006e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e6:	3304      	adds	r3, #4

080006e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ec:	d3f9      	bcc.n	80006e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f0:	4c0a      	ldr	r4, [pc, #40]	; (800071c <LoopForever+0x16>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f4:	e001      	b.n	80006fa <LoopFillZerobss>

080006f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f8:	3204      	adds	r2, #4

080006fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006fc:	d3fb      	bcc.n	80006f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006fe:	f003 fa7f 	bl	8003c00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000702:	f7ff fd69 	bl	80001d8 <main>

08000706 <LoopForever>:

LoopForever:
    b LoopForever
 8000706:	e7fe      	b.n	8000706 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000708:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800070c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000710:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000714:	08003da8 	.word	0x08003da8
  ldr r2, =_sbss
 8000718:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800071c:	20000400 	.word	0x20000400

08000720 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC1_IRQHandler>
	...

08000724 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <HAL_Init+0x28>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a07      	ldr	r2, [pc, #28]	; (800074c <HAL_Init+0x28>)
 800072e:	f043 0310 	orr.w	r3, r3, #16
 8000732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000734:	2003      	movs	r0, #3
 8000736:	f000 f92b 	bl	8000990 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800073a:	2000      	movs	r0, #0
 800073c:	f000 f808 	bl	8000750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000740:	f7ff fee0 	bl	8000504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40022000 	.word	0x40022000

08000750 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <HAL_InitTick+0x54>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <HAL_InitTick+0x58>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	4619      	mov	r1, r3
 8000762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000766:	fbb3 f3f1 	udiv	r3, r3, r1
 800076a:	fbb2 f3f3 	udiv	r3, r2, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f943 	bl	80009fa <HAL_SYSTICK_Config>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800077a:	2301      	movs	r3, #1
 800077c:	e00e      	b.n	800079c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b0f      	cmp	r3, #15
 8000782:	d80a      	bhi.n	800079a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000784:	2200      	movs	r2, #0
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800078c:	f000 f90b 	bl	80009a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000790:	4a06      	ldr	r2, [pc, #24]	; (80007ac <HAL_InitTick+0x5c>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000796:	2300      	movs	r3, #0
 8000798:	e000      	b.n	800079c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
}
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000000 	.word	0x20000000
 80007a8:	20000008 	.word	0x20000008
 80007ac:	20000004 	.word	0x20000004

080007b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_IncTick+0x20>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_IncTick+0x24>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4413      	add	r3, r2
 80007c0:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <HAL_IncTick+0x24>)
 80007c2:	6013      	str	r3, [r2, #0]
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	20000008 	.word	0x20000008
 80007d4:	200003fc 	.word	0x200003fc

080007d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return uwTick;  
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <HAL_GetTick+0x14>)
 80007de:	681b      	ldr	r3, [r3, #0]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	200003fc 	.word	0x200003fc

080007f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <__NVIC_SetPriorityGrouping+0x44>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800080c:	4013      	ands	r3, r2
 800080e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800081c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000822:	4a04      	ldr	r2, [pc, #16]	; (8000834 <__NVIC_SetPriorityGrouping+0x44>)
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	60d3      	str	r3, [r2, #12]
}
 8000828:	bf00      	nop
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <__NVIC_GetPriorityGrouping+0x18>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	0a1b      	lsrs	r3, r3, #8
 8000842:	f003 0307 	and.w	r3, r3, #7
}
 8000846:	4618      	mov	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	2b00      	cmp	r3, #0
 8000864:	db0b      	blt.n	800087e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	f003 021f 	and.w	r2, r3, #31
 800086c:	4907      	ldr	r1, [pc, #28]	; (800088c <__NVIC_EnableIRQ+0x38>)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	095b      	lsrs	r3, r3, #5
 8000874:	2001      	movs	r0, #1
 8000876:	fa00 f202 	lsl.w	r2, r0, r2
 800087a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000e100 	.word	0xe000e100

08000890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	db0a      	blt.n	80008ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	490c      	ldr	r1, [pc, #48]	; (80008dc <__NVIC_SetPriority+0x4c>)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	0112      	lsls	r2, r2, #4
 80008b0:	b2d2      	uxtb	r2, r2
 80008b2:	440b      	add	r3, r1
 80008b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b8:	e00a      	b.n	80008d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4908      	ldr	r1, [pc, #32]	; (80008e0 <__NVIC_SetPriority+0x50>)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	f003 030f 	and.w	r3, r3, #15
 80008c6:	3b04      	subs	r3, #4
 80008c8:	0112      	lsls	r2, r2, #4
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	440b      	add	r3, r1
 80008ce:	761a      	strb	r2, [r3, #24]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000e100 	.word	0xe000e100
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b089      	sub	sp, #36	; 0x24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	f1c3 0307 	rsb	r3, r3, #7
 80008fe:	2b04      	cmp	r3, #4
 8000900:	bf28      	it	cs
 8000902:	2304      	movcs	r3, #4
 8000904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3304      	adds	r3, #4
 800090a:	2b06      	cmp	r3, #6
 800090c:	d902      	bls.n	8000914 <NVIC_EncodePriority+0x30>
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3b03      	subs	r3, #3
 8000912:	e000      	b.n	8000916 <NVIC_EncodePriority+0x32>
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43da      	mvns	r2, r3
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	401a      	ands	r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800092c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	43d9      	mvns	r1, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	4313      	orrs	r3, r2
         );
}
 800093e:	4618      	mov	r0, r3
 8000940:	3724      	adds	r7, #36	; 0x24
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b01      	subs	r3, #1
 8000958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800095c:	d301      	bcc.n	8000962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095e:	2301      	movs	r3, #1
 8000960:	e00f      	b.n	8000982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <SysTick_Config+0x40>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096a:	210f      	movs	r1, #15
 800096c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000970:	f7ff ff8e 	bl	8000890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <SysTick_Config+0x40>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <SysTick_Config+0x40>)
 800097c:	2207      	movs	r2, #7
 800097e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	e000e010 	.word	0xe000e010

08000990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ff29 	bl	80007f0 <__NVIC_SetPriorityGrouping>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	4603      	mov	r3, r0
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b8:	f7ff ff3e 	bl	8000838 <__NVIC_GetPriorityGrouping>
 80009bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	68b9      	ldr	r1, [r7, #8]
 80009c2:	6978      	ldr	r0, [r7, #20]
 80009c4:	f7ff ff8e 	bl	80008e4 <NVIC_EncodePriority>
 80009c8:	4602      	mov	r2, r0
 80009ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff5d 	bl	8000890 <__NVIC_SetPriority>
}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff31 	bl	8000854 <__NVIC_EnableIRQ>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ffa2 	bl	800094c <SysTick_Config>
 8000a08:	4603      	mov	r3, r0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d008      	beq.n	8000a36 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2204      	movs	r2, #4
 8000a28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e020      	b.n	8000a78 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f022 020e 	bic.w	r2, r2, #14
 8000a44:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f022 0201 	bic.w	r2, r2, #1
 8000a54:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a5e:	2101      	movs	r1, #1
 8000a60:	fa01 f202 	lsl.w	r2, r1, r2
 8000a64:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d005      	beq.n	8000aa6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]
 8000aa4:	e027      	b.n	8000af6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f022 020e 	bic.w	r2, r2, #14
 8000ab4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f022 0201 	bic.w	r2, r2, #1
 8000ac4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ace:	2101      	movs	r1, #1
 8000ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d003      	beq.n	8000af6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	4798      	blx	r3
    } 
  }
  return status;
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b087      	sub	sp, #28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0e:	e14e      	b.n	8000dae <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	2101      	movs	r1, #1
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 8140 	beq.w	8000da8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d005      	beq.n	8000b40 <HAL_GPIO_Init+0x40>
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 0303 	and.w	r3, r3, #3
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d130      	bne.n	8000ba2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b76:	2201      	movs	r2, #1
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	091b      	lsrs	r3, r3, #4
 8000b8c:	f003 0201 	and.w	r2, r3, #1
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 0303 	and.w	r3, r3, #3
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d017      	beq.n	8000bde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	2203      	movs	r2, #3
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f003 0303 	and.w	r3, r3, #3
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d123      	bne.n	8000c32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	08da      	lsrs	r2, r3, #3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3208      	adds	r2, #8
 8000bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	220f      	movs	r2, #15
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	691a      	ldr	r2, [r3, #16]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f003 0307 	and.w	r3, r3, #7
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	08da      	lsrs	r2, r3, #3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3208      	adds	r2, #8
 8000c2c:	6939      	ldr	r1, [r7, #16]
 8000c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 0203 	and.w	r2, r3, #3
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 809a 	beq.w	8000da8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c74:	4b55      	ldr	r3, [pc, #340]	; (8000dcc <HAL_GPIO_Init+0x2cc>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a54      	ldr	r2, [pc, #336]	; (8000dcc <HAL_GPIO_Init+0x2cc>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b52      	ldr	r3, [pc, #328]	; (8000dcc <HAL_GPIO_Init+0x2cc>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c8c:	4a50      	ldr	r2, [pc, #320]	; (8000dd0 <HAL_GPIO_Init+0x2d0>)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	089b      	lsrs	r3, r3, #2
 8000c92:	3302      	adds	r3, #2
 8000c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	220f      	movs	r2, #15
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cb6:	d013      	beq.n	8000ce0 <HAL_GPIO_Init+0x1e0>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a46      	ldr	r2, [pc, #280]	; (8000dd4 <HAL_GPIO_Init+0x2d4>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d00d      	beq.n	8000cdc <HAL_GPIO_Init+0x1dc>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a45      	ldr	r2, [pc, #276]	; (8000dd8 <HAL_GPIO_Init+0x2d8>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d007      	beq.n	8000cd8 <HAL_GPIO_Init+0x1d8>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a44      	ldr	r2, [pc, #272]	; (8000ddc <HAL_GPIO_Init+0x2dc>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d101      	bne.n	8000cd4 <HAL_GPIO_Init+0x1d4>
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	e006      	b.n	8000ce2 <HAL_GPIO_Init+0x1e2>
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	e004      	b.n	8000ce2 <HAL_GPIO_Init+0x1e2>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	e002      	b.n	8000ce2 <HAL_GPIO_Init+0x1e2>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <HAL_GPIO_Init+0x1e2>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	f002 0203 	and.w	r2, r2, #3
 8000ce8:	0092      	lsls	r2, r2, #2
 8000cea:	4093      	lsls	r3, r2
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cf2:	4937      	ldr	r1, [pc, #220]	; (8000dd0 <HAL_GPIO_Init+0x2d0>)
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d00:	4b37      	ldr	r3, [pc, #220]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d24:	4a2e      	ldr	r2, [pc, #184]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d2a:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d4e:	4a24      	ldr	r2, [pc, #144]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d54:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d78:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	3301      	adds	r3, #1
 8000dac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	fa22 f303 	lsr.w	r3, r2, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f47f aea9 	bne.w	8000b10 <HAL_GPIO_Init+0x10>
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	bf00      	nop
 8000dc2:	371c      	adds	r7, #28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010000 	.word	0x40010000
 8000dd4:	48000400 	.word	0x48000400
 8000dd8:	48000800 	.word	0x48000800
 8000ddc:	48000c00 	.word	0x48000c00
 8000de0:	40010400 	.word	0x40010400

08000de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	807b      	strh	r3, [r7, #2]
 8000df0:	4613      	mov	r3, r2
 8000df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000df4:	787b      	ldrb	r3, [r7, #1]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dfa:	887a      	ldrh	r2, [r7, #2]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e00:	e002      	b.n	8000e08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e02:	887a      	ldrh	r2, [r7, #2]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e24:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	f001 b823 	b.w	8001e80 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 817d 	beq.w	800114a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e50:	4bbc      	ldr	r3, [pc, #752]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 030c 	and.w	r3, r3, #12
 8000e58:	2b04      	cmp	r3, #4
 8000e5a:	d00c      	beq.n	8000e76 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e5c:	4bb9      	ldr	r3, [pc, #740]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 030c 	and.w	r3, r3, #12
 8000e64:	2b08      	cmp	r3, #8
 8000e66:	d15c      	bne.n	8000f22 <HAL_RCC_OscConfig+0x10e>
 8000e68:	4bb6      	ldr	r3, [pc, #728]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e74:	d155      	bne.n	8000f22 <HAL_RCC_OscConfig+0x10e>
 8000e76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e7a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e82:	fa93 f3a3 	rbit	r3, r3
 8000e86:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e8a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e8e:	fab3 f383 	clz	r3, r3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	095b      	lsrs	r3, r3, #5
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d102      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x94>
 8000ea2:	4ba8      	ldr	r3, [pc, #672]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	e015      	b.n	8000ed4 <HAL_RCC_OscConfig+0xc0>
 8000ea8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eac:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000eb4:	fa93 f3a3 	rbit	r3, r3
 8000eb8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ec4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ec8:	fa93 f3a3 	rbit	r3, r3
 8000ecc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000ed0:	4b9c      	ldr	r3, [pc, #624]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ed8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000edc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000ee0:	fa92 f2a2 	rbit	r2, r2
 8000ee4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000ee8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000eec:	fab2 f282 	clz	r2, r2
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	f042 0220 	orr.w	r2, r2, #32
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	f002 021f 	and.w	r2, r2, #31
 8000efc:	2101      	movs	r1, #1
 8000efe:	fa01 f202 	lsl.w	r2, r1, r2
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 811f 	beq.w	8001148 <HAL_RCC_OscConfig+0x334>
 8000f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f040 8116 	bne.w	8001148 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f000 bfaf 	b.w	8001e80 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f32:	d106      	bne.n	8000f42 <HAL_RCC_OscConfig+0x12e>
 8000f34:	4b83      	ldr	r3, [pc, #524]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a82      	ldr	r2, [pc, #520]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	e036      	b.n	8000fb0 <HAL_RCC_OscConfig+0x19c>
 8000f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10c      	bne.n	8000f6c <HAL_RCC_OscConfig+0x158>
 8000f52:	4b7c      	ldr	r3, [pc, #496]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a7b      	ldr	r2, [pc, #492]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	4b79      	ldr	r3, [pc, #484]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a78      	ldr	r2, [pc, #480]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e021      	b.n	8000fb0 <HAL_RCC_OscConfig+0x19c>
 8000f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f7c:	d10c      	bne.n	8000f98 <HAL_RCC_OscConfig+0x184>
 8000f7e:	4b71      	ldr	r3, [pc, #452]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a70      	ldr	r2, [pc, #448]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	4b6e      	ldr	r3, [pc, #440]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a6d      	ldr	r2, [pc, #436]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e00b      	b.n	8000fb0 <HAL_RCC_OscConfig+0x19c>
 8000f98:	4b6a      	ldr	r3, [pc, #424]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a69      	ldr	r2, [pc, #420]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b67      	ldr	r3, [pc, #412]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a66      	ldr	r2, [pc, #408]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fae:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fb0:	4b64      	ldr	r3, [pc, #400]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb4:	f023 020f 	bic.w	r2, r3, #15
 8000fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	495f      	ldr	r1, [pc, #380]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d059      	beq.n	800108e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fda:	f7ff fbfd 	bl	80007d8 <HAL_GetTick>
 8000fde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe2:	e00a      	b.n	8000ffa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe4:	f7ff fbf8 	bl	80007d8 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b64      	cmp	r3, #100	; 0x64
 8000ff2:	d902      	bls.n	8000ffa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	f000 bf43 	b.w	8001e80 <HAL_RCC_OscConfig+0x106c>
 8000ffa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ffe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001002:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001006:	fa93 f3a3 	rbit	r3, r3
 800100a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800100e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001012:	fab3 f383 	clz	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	095b      	lsrs	r3, r3, #5
 800101a:	b2db      	uxtb	r3, r3
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b01      	cmp	r3, #1
 8001024:	d102      	bne.n	800102c <HAL_RCC_OscConfig+0x218>
 8001026:	4b47      	ldr	r3, [pc, #284]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	e015      	b.n	8001058 <HAL_RCC_OscConfig+0x244>
 800102c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001030:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001034:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001038:	fa93 f3a3 	rbit	r3, r3
 800103c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001044:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001048:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800104c:	fa93 f3a3 	rbit	r3, r3
 8001050:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001054:	4b3b      	ldr	r3, [pc, #236]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800105c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001060:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001064:	fa92 f2a2 	rbit	r2, r2
 8001068:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800106c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001070:	fab2 f282 	clz	r2, r2
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	f042 0220 	orr.w	r2, r2, #32
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	f002 021f 	and.w	r2, r2, #31
 8001080:	2101      	movs	r1, #1
 8001082:	fa01 f202 	lsl.w	r2, r1, r2
 8001086:	4013      	ands	r3, r2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0ab      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x1d0>
 800108c:	e05d      	b.n	800114a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108e:	f7ff fba3 	bl	80007d8 <HAL_GetTick>
 8001092:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001096:	e00a      	b.n	80010ae <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001098:	f7ff fb9e 	bl	80007d8 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b64      	cmp	r3, #100	; 0x64
 80010a6:	d902      	bls.n	80010ae <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	f000 bee9 	b.w	8001e80 <HAL_RCC_OscConfig+0x106c>
 80010ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80010ba:	fa93 f3a3 	rbit	r3, r3
 80010be:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80010c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c6:	fab3 f383 	clz	r3, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	095b      	lsrs	r3, r3, #5
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d102      	bne.n	80010e0 <HAL_RCC_OscConfig+0x2cc>
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	e015      	b.n	800110c <HAL_RCC_OscConfig+0x2f8>
 80010e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80010ec:	fa93 f3a3 	rbit	r3, r3
 80010f0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80010f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80010fc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001100:	fa93 f3a3 	rbit	r3, r3
 8001104:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <HAL_RCC_OscConfig+0x330>)
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001110:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001114:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001118:	fa92 f2a2 	rbit	r2, r2
 800111c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001120:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001124:	fab2 f282 	clz	r2, r2
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	f042 0220 	orr.w	r2, r2, #32
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	f002 021f 	and.w	r2, r2, #31
 8001134:	2101      	movs	r1, #1
 8001136:	fa01 f202 	lsl.w	r2, r1, r2
 800113a:	4013      	ands	r3, r2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1ab      	bne.n	8001098 <HAL_RCC_OscConfig+0x284>
 8001140:	e003      	b.n	800114a <HAL_RCC_OscConfig+0x336>
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800114e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 817d 	beq.w	800145a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001160:	4ba6      	ldr	r3, [pc, #664]	; (80013fc <HAL_RCC_OscConfig+0x5e8>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 030c 	and.w	r3, r3, #12
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00b      	beq.n	8001184 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800116c:	4ba3      	ldr	r3, [pc, #652]	; (80013fc <HAL_RCC_OscConfig+0x5e8>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 030c 	and.w	r3, r3, #12
 8001174:	2b08      	cmp	r3, #8
 8001176:	d172      	bne.n	800125e <HAL_RCC_OscConfig+0x44a>
 8001178:	4ba0      	ldr	r3, [pc, #640]	; (80013fc <HAL_RCC_OscConfig+0x5e8>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d16c      	bne.n	800125e <HAL_RCC_OscConfig+0x44a>
 8001184:	2302      	movs	r3, #2
 8001186:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800118e:	fa93 f3a3 	rbit	r3, r3
 8001192:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001196:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119a:	fab3 f383 	clz	r3, r3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	095b      	lsrs	r3, r3, #5
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d102      	bne.n	80011b4 <HAL_RCC_OscConfig+0x3a0>
 80011ae:	4b93      	ldr	r3, [pc, #588]	; (80013fc <HAL_RCC_OscConfig+0x5e8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	e013      	b.n	80011dc <HAL_RCC_OscConfig+0x3c8>
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80011c6:	2302      	movs	r3, #2
 80011c8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011cc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80011d0:	fa93 f3a3 	rbit	r3, r3
 80011d4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80011d8:	4b88      	ldr	r3, [pc, #544]	; (80013fc <HAL_RCC_OscConfig+0x5e8>)
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	2202      	movs	r2, #2
 80011de:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80011e2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011e6:	fa92 f2a2 	rbit	r2, r2
 80011ea:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80011ee:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80011f2:	fab2 f282 	clz	r2, r2
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	f042 0220 	orr.w	r2, r2, #32
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	f002 021f 	and.w	r2, r2, #31
 8001202:	2101      	movs	r1, #1
 8001204:	fa01 f202 	lsl.w	r2, r1, r2
 8001208:	4013      	ands	r3, r2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00a      	beq.n	8001224 <HAL_RCC_OscConfig+0x410>
 800120e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001212:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d002      	beq.n	8001224 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	f000 be2e 	b.w	8001e80 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001224:	4b75      	ldr	r3, [pc, #468]	; (80013fc <HAL_RCC_OscConfig+0x5e8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800122c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001230:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	21f8      	movs	r1, #248	; 0xf8
 800123a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001242:	fa91 f1a1 	rbit	r1, r1
 8001246:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800124a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800124e:	fab1 f181 	clz	r1, r1
 8001252:	b2c9      	uxtb	r1, r1
 8001254:	408b      	lsls	r3, r1
 8001256:	4969      	ldr	r1, [pc, #420]	; (80013fc <HAL_RCC_OscConfig+0x5e8>)
 8001258:	4313      	orrs	r3, r2
 800125a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125c:	e0fd      	b.n	800145a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800125e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001262:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 8088 	beq.w	8001380 <HAL_RCC_OscConfig+0x56c>
 8001270:	2301      	movs	r3, #1
 8001272:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001276:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001282:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001286:	fab3 f383 	clz	r3, r3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001290:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	461a      	mov	r2, r3
 8001298:	2301      	movs	r3, #1
 800129a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fa9c 	bl	80007d8 <HAL_GetTick>
 80012a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a4:	e00a      	b.n	80012bc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a6:	f7ff fa97 	bl	80007d8 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d902      	bls.n	80012bc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	f000 bde2 	b.w	8001e80 <HAL_RCC_OscConfig+0x106c>
 80012bc:	2302      	movs	r3, #2
 80012be:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80012ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d2:	fab3 f383 	clz	r3, r3
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	095b      	lsrs	r3, r3, #5
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d102      	bne.n	80012ec <HAL_RCC_OscConfig+0x4d8>
 80012e6:	4b45      	ldr	r3, [pc, #276]	; (80013fc <HAL_RCC_OscConfig+0x5e8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	e013      	b.n	8001314 <HAL_RCC_OscConfig+0x500>
 80012ec:	2302      	movs	r3, #2
 80012ee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80012fe:	2302      	movs	r3, #2
 8001300:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001304:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001308:	fa93 f3a3 	rbit	r3, r3
 800130c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001310:	4b3a      	ldr	r3, [pc, #232]	; (80013fc <HAL_RCC_OscConfig+0x5e8>)
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	2202      	movs	r2, #2
 8001316:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800131a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800131e:	fa92 f2a2 	rbit	r2, r2
 8001322:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001326:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800132a:	fab2 f282 	clz	r2, r2
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	f042 0220 	orr.w	r2, r2, #32
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	f002 021f 	and.w	r2, r2, #31
 800133a:	2101      	movs	r1, #1
 800133c:	fa01 f202 	lsl.w	r2, r1, r2
 8001340:	4013      	ands	r3, r2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0af      	beq.n	80012a6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001346:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <HAL_RCC_OscConfig+0x5e8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800134e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001352:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	21f8      	movs	r1, #248	; 0xf8
 800135c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001364:	fa91 f1a1 	rbit	r1, r1
 8001368:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800136c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001370:	fab1 f181 	clz	r1, r1
 8001374:	b2c9      	uxtb	r1, r1
 8001376:	408b      	lsls	r3, r1
 8001378:	4920      	ldr	r1, [pc, #128]	; (80013fc <HAL_RCC_OscConfig+0x5e8>)
 800137a:	4313      	orrs	r3, r2
 800137c:	600b      	str	r3, [r1, #0]
 800137e:	e06c      	b.n	800145a <HAL_RCC_OscConfig+0x646>
 8001380:	2301      	movs	r3, #1
 8001382:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001386:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800138a:	fa93 f3a3 	rbit	r3, r3
 800138e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001392:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001396:	fab3 f383 	clz	r3, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	461a      	mov	r2, r3
 80013a8:	2300      	movs	r3, #0
 80013aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fa14 	bl	80007d8 <HAL_GetTick>
 80013b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b4:	e00a      	b.n	80013cc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fa0f 	bl	80007d8 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d902      	bls.n	80013cc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	f000 bd5a 	b.w	8001e80 <HAL_RCC_OscConfig+0x106c>
 80013cc:	2302      	movs	r3, #2
 80013ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80013d6:	fa93 f3a3 	rbit	r3, r3
 80013da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80013de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e2:	fab3 f383 	clz	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	095b      	lsrs	r3, r3, #5
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d104      	bne.n	8001400 <HAL_RCC_OscConfig+0x5ec>
 80013f6:	4b01      	ldr	r3, [pc, #4]	; (80013fc <HAL_RCC_OscConfig+0x5e8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	e015      	b.n	8001428 <HAL_RCC_OscConfig+0x614>
 80013fc:	40021000 	.word	0x40021000
 8001400:	2302      	movs	r3, #2
 8001402:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001406:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800140a:	fa93 f3a3 	rbit	r3, r3
 800140e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001412:	2302      	movs	r3, #2
 8001414:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001418:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800141c:	fa93 f3a3 	rbit	r3, r3
 8001420:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001424:	4bc8      	ldr	r3, [pc, #800]	; (8001748 <HAL_RCC_OscConfig+0x934>)
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	2202      	movs	r2, #2
 800142a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800142e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001432:	fa92 f2a2 	rbit	r2, r2
 8001436:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800143a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800143e:	fab2 f282 	clz	r2, r2
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	f042 0220 	orr.w	r2, r2, #32
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	f002 021f 	and.w	r2, r2, #31
 800144e:	2101      	movs	r1, #1
 8001450:	fa01 f202 	lsl.w	r2, r1, r2
 8001454:	4013      	ands	r3, r2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1ad      	bne.n	80013b6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 8110 	beq.w	8001690 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001474:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d079      	beq.n	8001574 <HAL_RCC_OscConfig+0x760>
 8001480:	2301      	movs	r3, #1
 8001482:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001486:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800148a:	fa93 f3a3 	rbit	r3, r3
 800148e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001496:	fab3 f383 	clz	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	461a      	mov	r2, r3
 800149e:	4bab      	ldr	r3, [pc, #684]	; (800174c <HAL_RCC_OscConfig+0x938>)
 80014a0:	4413      	add	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	461a      	mov	r2, r3
 80014a6:	2301      	movs	r3, #1
 80014a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014aa:	f7ff f995 	bl	80007d8 <HAL_GetTick>
 80014ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b2:	e00a      	b.n	80014ca <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b4:	f7ff f990 	bl	80007d8 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d902      	bls.n	80014ca <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	f000 bcdb 	b.w	8001e80 <HAL_RCC_OscConfig+0x106c>
 80014ca:	2302      	movs	r3, #2
 80014cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80014d4:	fa93 f3a3 	rbit	r3, r3
 80014d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014e4:	2202      	movs	r2, #2
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	fa93 f2a3 	rbit	r2, r3
 80014f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001508:	2202      	movs	r2, #2
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	fa93 f2a3 	rbit	r2, r3
 800151a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001522:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001524:	4b88      	ldr	r3, [pc, #544]	; (8001748 <HAL_RCC_OscConfig+0x934>)
 8001526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001530:	2102      	movs	r1, #2
 8001532:	6019      	str	r1, [r3, #0]
 8001534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001538:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	fa93 f1a3 	rbit	r1, r3
 8001542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001546:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800154a:	6019      	str	r1, [r3, #0]
  return result;
 800154c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001550:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	fab3 f383 	clz	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001560:	b2db      	uxtb	r3, r3
 8001562:	f003 031f 	and.w	r3, r3, #31
 8001566:	2101      	movs	r1, #1
 8001568:	fa01 f303 	lsl.w	r3, r1, r3
 800156c:	4013      	ands	r3, r2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0a0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x6a0>
 8001572:	e08d      	b.n	8001690 <HAL_RCC_OscConfig+0x87c>
 8001574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001578:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001584:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	fa93 f2a3 	rbit	r2, r3
 800158e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001592:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001596:	601a      	str	r2, [r3, #0]
  return result;
 8001598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015a0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a2:	fab3 f383 	clz	r3, r3
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b68      	ldr	r3, [pc, #416]	; (800174c <HAL_RCC_OscConfig+0x938>)
 80015ac:	4413      	add	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	461a      	mov	r2, r3
 80015b2:	2300      	movs	r3, #0
 80015b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b6:	f7ff f90f 	bl	80007d8 <HAL_GetTick>
 80015ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c0:	f7ff f90a 	bl	80007d8 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d902      	bls.n	80015d6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	f000 bc55 	b.w	8001e80 <HAL_RCC_OscConfig+0x106c>
 80015d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015da:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015de:	2202      	movs	r2, #2
 80015e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	fa93 f2a3 	rbit	r2, r3
 80015f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001602:	2202      	movs	r2, #2
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	fa93 f2a3 	rbit	r2, r3
 8001614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001618:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001626:	2202      	movs	r2, #2
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800162e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	fa93 f2a3 	rbit	r2, r3
 8001638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001640:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <HAL_RCC_OscConfig+0x934>)
 8001644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800164e:	2102      	movs	r1, #2
 8001650:	6019      	str	r1, [r3, #0]
 8001652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001656:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	fa93 f1a3 	rbit	r1, r3
 8001660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001664:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001668:	6019      	str	r1, [r3, #0]
  return result;
 800166a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	fab3 f383 	clz	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800167e:	b2db      	uxtb	r3, r3
 8001680:	f003 031f 	and.w	r3, r3, #31
 8001684:	2101      	movs	r1, #1
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	4013      	ands	r3, r2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d197      	bne.n	80015c0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001694:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 81a1 	beq.w	80019e8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ac:	4b26      	ldr	r3, [pc, #152]	; (8001748 <HAL_RCC_OscConfig+0x934>)
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d116      	bne.n	80016e6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b8:	4b23      	ldr	r3, [pc, #140]	; (8001748 <HAL_RCC_OscConfig+0x934>)
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	4a22      	ldr	r2, [pc, #136]	; (8001748 <HAL_RCC_OscConfig+0x934>)
 80016be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c2:	61d3      	str	r3, [r2, #28]
 80016c4:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_RCC_OscConfig+0x934>)
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016da:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016de:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016e0:	2301      	movs	r3, #1
 80016e2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e6:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <HAL_RCC_OscConfig+0x93c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d11a      	bne.n	8001728 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_RCC_OscConfig+0x93c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a16      	ldr	r2, [pc, #88]	; (8001750 <HAL_RCC_OscConfig+0x93c>)
 80016f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016fe:	f7ff f86b 	bl	80007d8 <HAL_GetTick>
 8001702:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001706:	e009      	b.n	800171c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001708:	f7ff f866 	bl	80007d8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b64      	cmp	r3, #100	; 0x64
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e3b1      	b.n	8001e80 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <HAL_RCC_OscConfig+0x93c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0ef      	beq.n	8001708 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d10d      	bne.n	8001754 <HAL_RCC_OscConfig+0x940>
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_RCC_OscConfig+0x934>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a02      	ldr	r2, [pc, #8]	; (8001748 <HAL_RCC_OscConfig+0x934>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	e03c      	b.n	80017c0 <HAL_RCC_OscConfig+0x9ac>
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	10908120 	.word	0x10908120
 8001750:	40007000 	.word	0x40007000
 8001754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001758:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10c      	bne.n	800177e <HAL_RCC_OscConfig+0x96a>
 8001764:	4bc1      	ldr	r3, [pc, #772]	; (8001a6c <HAL_RCC_OscConfig+0xc58>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4ac0      	ldr	r2, [pc, #768]	; (8001a6c <HAL_RCC_OscConfig+0xc58>)
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	6213      	str	r3, [r2, #32]
 8001770:	4bbe      	ldr	r3, [pc, #760]	; (8001a6c <HAL_RCC_OscConfig+0xc58>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4abd      	ldr	r2, [pc, #756]	; (8001a6c <HAL_RCC_OscConfig+0xc58>)
 8001776:	f023 0304 	bic.w	r3, r3, #4
 800177a:	6213      	str	r3, [r2, #32]
 800177c:	e020      	b.n	80017c0 <HAL_RCC_OscConfig+0x9ac>
 800177e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001782:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b05      	cmp	r3, #5
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x994>
 800178e:	4bb7      	ldr	r3, [pc, #732]	; (8001a6c <HAL_RCC_OscConfig+0xc58>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4ab6      	ldr	r2, [pc, #728]	; (8001a6c <HAL_RCC_OscConfig+0xc58>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	6213      	str	r3, [r2, #32]
 800179a:	4bb4      	ldr	r3, [pc, #720]	; (8001a6c <HAL_RCC_OscConfig+0xc58>)
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	4ab3      	ldr	r2, [pc, #716]	; (8001a6c <HAL_RCC_OscConfig+0xc58>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6213      	str	r3, [r2, #32]
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0x9ac>
 80017a8:	4bb0      	ldr	r3, [pc, #704]	; (8001a6c <HAL_RCC_OscConfig+0xc58>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4aaf      	ldr	r2, [pc, #700]	; (8001a6c <HAL_RCC_OscConfig+0xc58>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	6213      	str	r3, [r2, #32]
 80017b4:	4bad      	ldr	r3, [pc, #692]	; (8001a6c <HAL_RCC_OscConfig+0xc58>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4aac      	ldr	r2, [pc, #688]	; (8001a6c <HAL_RCC_OscConfig+0xc58>)
 80017ba:	f023 0304 	bic.w	r3, r3, #4
 80017be:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 8081 	beq.w	80018d4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d2:	f7ff f801 	bl	80007d8 <HAL_GetTick>
 80017d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017da:	e00b      	b.n	80017f4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017dc:	f7fe fffc 	bl	80007d8 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e345      	b.n	8001e80 <HAL_RCC_OscConfig+0x106c>
 80017f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017fc:	2202      	movs	r2, #2
 80017fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001804:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	fa93 f2a3 	rbit	r2, r3
 800180e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001812:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001820:	2202      	movs	r2, #2
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001828:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	fa93 f2a3 	rbit	r2, r3
 8001832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001836:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800183a:	601a      	str	r2, [r3, #0]
  return result;
 800183c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001840:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001844:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001846:	fab3 f383 	clz	r3, r3
 800184a:	b2db      	uxtb	r3, r3
 800184c:	095b      	lsrs	r3, r3, #5
 800184e:	b2db      	uxtb	r3, r3
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d102      	bne.n	8001860 <HAL_RCC_OscConfig+0xa4c>
 800185a:	4b84      	ldr	r3, [pc, #528]	; (8001a6c <HAL_RCC_OscConfig+0xc58>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	e013      	b.n	8001888 <HAL_RCC_OscConfig+0xa74>
 8001860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001864:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001868:	2202      	movs	r2, #2
 800186a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001870:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	fa93 f2a3 	rbit	r2, r3
 800187a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	4b79      	ldr	r3, [pc, #484]	; (8001a6c <HAL_RCC_OscConfig+0xc58>)
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800188c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001890:	2102      	movs	r1, #2
 8001892:	6011      	str	r1, [r2, #0]
 8001894:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001898:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	fa92 f1a2 	rbit	r1, r2
 80018a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018a6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018aa:	6011      	str	r1, [r2, #0]
  return result;
 80018ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018b0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	fab2 f282 	clz	r2, r2
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	f002 021f 	and.w	r2, r2, #31
 80018c6:	2101      	movs	r1, #1
 80018c8:	fa01 f202 	lsl.w	r2, r1, r2
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d084      	beq.n	80017dc <HAL_RCC_OscConfig+0x9c8>
 80018d2:	e07f      	b.n	80019d4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7fe ff80 	bl	80007d8 <HAL_GetTick>
 80018d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018dc:	e00b      	b.n	80018f6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7fe ff7b 	bl	80007d8 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e2c4      	b.n	8001e80 <HAL_RCC_OscConfig+0x106c>
 80018f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018fe:	2202      	movs	r2, #2
 8001900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001906:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	fa93 f2a3 	rbit	r2, r3
 8001910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001914:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001922:	2202      	movs	r2, #2
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	fa93 f2a3 	rbit	r2, r3
 8001934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001938:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800193c:	601a      	str	r2, [r3, #0]
  return result;
 800193e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001942:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001946:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001948:	fab3 f383 	clz	r3, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	b2db      	uxtb	r3, r3
 8001952:	f043 0302 	orr.w	r3, r3, #2
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d102      	bne.n	8001962 <HAL_RCC_OscConfig+0xb4e>
 800195c:	4b43      	ldr	r3, [pc, #268]	; (8001a6c <HAL_RCC_OscConfig+0xc58>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	e013      	b.n	800198a <HAL_RCC_OscConfig+0xb76>
 8001962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001966:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800196a:	2202      	movs	r2, #2
 800196c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001972:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	fa93 f2a3 	rbit	r2, r3
 800197c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001980:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	4b39      	ldr	r3, [pc, #228]	; (8001a6c <HAL_RCC_OscConfig+0xc58>)
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800198e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001992:	2102      	movs	r1, #2
 8001994:	6011      	str	r1, [r2, #0]
 8001996:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800199a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	fa92 f1a2 	rbit	r1, r2
 80019a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019a8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019ac:	6011      	str	r1, [r2, #0]
  return result;
 80019ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019b2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	fab2 f282 	clz	r2, r2
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	f002 021f 	and.w	r2, r2, #31
 80019c8:	2101      	movs	r1, #1
 80019ca:	fa01 f202 	lsl.w	r2, r1, r2
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d184      	bne.n	80018de <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d105      	bne.n	80019e8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019dc:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <HAL_RCC_OscConfig+0xc58>)
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	4a22      	ldr	r2, [pc, #136]	; (8001a6c <HAL_RCC_OscConfig+0xc58>)
 80019e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 8242 	beq.w	8001e7e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019fa:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <HAL_RCC_OscConfig+0xc58>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	f000 8213 	beq.w	8001e2e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	f040 8162 	bne.w	8001cde <HAL_RCC_OscConfig+0xeca>
 8001a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	fa93 f2a3 	rbit	r2, r3
 8001a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a3e:	601a      	str	r2, [r3, #0]
  return result;
 8001a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a44:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a48:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7fe feba 	bl	80007d8 <HAL_GetTick>
 8001a64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a68:	e00c      	b.n	8001a84 <HAL_RCC_OscConfig+0xc70>
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a70:	f7fe feb2 	bl	80007d8 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e1fd      	b.n	8001e80 <HAL_RCC_OscConfig+0x106c>
 8001a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a88:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a96:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	fa93 f2a3 	rbit	r2, r3
 8001aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001aa8:	601a      	str	r2, [r3, #0]
  return result;
 8001aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ab2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d102      	bne.n	8001ace <HAL_RCC_OscConfig+0xcba>
 8001ac8:	4bb0      	ldr	r3, [pc, #704]	; (8001d8c <HAL_RCC_OscConfig+0xf78>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	e027      	b.n	8001b1e <HAL_RCC_OscConfig+0xd0a>
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ad6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ada:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	fa93 f2a3 	rbit	r2, r3
 8001aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aee:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001afc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b06:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	fa93 f2a3 	rbit	r2, r3
 8001b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b14:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	4b9c      	ldr	r3, [pc, #624]	; (8001d8c <HAL_RCC_OscConfig+0xf78>)
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b22:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b26:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b2a:	6011      	str	r1, [r2, #0]
 8001b2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b30:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	fa92 f1a2 	rbit	r1, r2
 8001b3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b3e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b42:	6011      	str	r1, [r2, #0]
  return result;
 8001b44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b48:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	fab2 f282 	clz	r2, r2
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	f042 0220 	orr.w	r2, r2, #32
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	f002 021f 	and.w	r2, r2, #31
 8001b5e:	2101      	movs	r1, #1
 8001b60:	fa01 f202 	lsl.w	r2, r1, r2
 8001b64:	4013      	ands	r3, r2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d182      	bne.n	8001a70 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b6a:	4b88      	ldr	r3, [pc, #544]	; (8001d8c <HAL_RCC_OscConfig+0xf78>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	430b      	orrs	r3, r1
 8001b8c:	497f      	ldr	r1, [pc, #508]	; (8001d8c <HAL_RCC_OscConfig+0xf78>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	604b      	str	r3, [r1, #4]
 8001b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b96:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001b9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	fa93 f2a3 	rbit	r2, r3
 8001bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001bb6:	601a      	str	r2, [r3, #0]
  return result;
 8001bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001bc0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc2:	fab3 f383 	clz	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bcc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7fe fdfe 	bl	80007d8 <HAL_GetTick>
 8001bdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be0:	e009      	b.n	8001bf6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be2:	f7fe fdf9 	bl	80007d8 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e144      	b.n	8001e80 <HAL_RCC_OscConfig+0x106c>
 8001bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001bfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c08:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	fa93 f2a3 	rbit	r2, r3
 8001c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c16:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c1a:	601a      	str	r2, [r3, #0]
  return result;
 8001c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c20:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	095b      	lsrs	r3, r3, #5
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d102      	bne.n	8001c40 <HAL_RCC_OscConfig+0xe2c>
 8001c3a:	4b54      	ldr	r3, [pc, #336]	; (8001d8c <HAL_RCC_OscConfig+0xf78>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	e027      	b.n	8001c90 <HAL_RCC_OscConfig+0xe7c>
 8001c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c44:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c52:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	fa93 f2a3 	rbit	r2, r3
 8001c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c60:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c78:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	fa93 f2a3 	rbit	r2, r3
 8001c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c86:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	4b3f      	ldr	r3, [pc, #252]	; (8001d8c <HAL_RCC_OscConfig+0xf78>)
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c94:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001c98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c9c:	6011      	str	r1, [r2, #0]
 8001c9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ca2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	fa92 f1a2 	rbit	r1, r2
 8001cac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cb0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001cb4:	6011      	str	r1, [r2, #0]
  return result;
 8001cb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cba:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	fab2 f282 	clz	r2, r2
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	f042 0220 	orr.w	r2, r2, #32
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	f002 021f 	and.w	r2, r2, #31
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d082      	beq.n	8001be2 <HAL_RCC_OscConfig+0xdce>
 8001cdc:	e0cf      	b.n	8001e7e <HAL_RCC_OscConfig+0x106a>
 8001cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ce6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	fa93 f2a3 	rbit	r2, r3
 8001cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d02:	601a      	str	r2, [r3, #0]
  return result;
 8001d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d08:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d0c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2300      	movs	r3, #0
 8001d22:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7fe fd58 	bl	80007d8 <HAL_GetTick>
 8001d28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2c:	e009      	b.n	8001d42 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2e:	f7fe fd53 	bl	80007d8 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e09e      	b.n	8001e80 <HAL_RCC_OscConfig+0x106c>
 8001d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d46:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d54:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	fa93 f2a3 	rbit	r2, r3
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d66:	601a      	str	r2, [r3, #0]
  return result;
 8001d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d72:	fab3 f383 	clz	r3, r3
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	095b      	lsrs	r3, r3, #5
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d104      	bne.n	8001d90 <HAL_RCC_OscConfig+0xf7c>
 8001d86:	4b01      	ldr	r3, [pc, #4]	; (8001d8c <HAL_RCC_OscConfig+0xf78>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	e029      	b.n	8001de0 <HAL_RCC_OscConfig+0xfcc>
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d94:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001d98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	fa93 f2a3 	rbit	r2, r3
 8001dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dba:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001dbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	fa93 f2a3 	rbit	r2, r3
 8001dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <HAL_RCC_OscConfig+0x1078>)
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001de4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001de8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dec:	6011      	str	r1, [r2, #0]
 8001dee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001df2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	fa92 f1a2 	rbit	r1, r2
 8001dfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e00:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e04:	6011      	str	r1, [r2, #0]
  return result;
 8001e06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e0a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	fab2 f282 	clz	r2, r2
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	f042 0220 	orr.w	r2, r2, #32
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	f002 021f 	and.w	r2, r2, #31
 8001e20:	2101      	movs	r1, #1
 8001e22:	fa01 f202 	lsl.w	r2, r1, r2
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d180      	bne.n	8001d2e <HAL_RCC_OscConfig+0xf1a>
 8001e2c:	e027      	b.n	8001e7e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e01e      	b.n	8001e80 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_RCC_OscConfig+0x1078>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e4e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d10b      	bne.n	8001e7a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e62:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d001      	beq.n	8001e7e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000

08001e90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b09e      	sub	sp, #120	; 0x78
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e162      	b.n	800216e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b90      	ldr	r3, [pc, #576]	; (80020ec <HAL_RCC_ClockConfig+0x25c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d910      	bls.n	8001ed8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b8d      	ldr	r3, [pc, #564]	; (80020ec <HAL_RCC_ClockConfig+0x25c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 0207 	bic.w	r2, r3, #7
 8001ebe:	498b      	ldr	r1, [pc, #556]	; (80020ec <HAL_RCC_ClockConfig+0x25c>)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b89      	ldr	r3, [pc, #548]	; (80020ec <HAL_RCC_ClockConfig+0x25c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e14a      	b.n	800216e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee4:	4b82      	ldr	r3, [pc, #520]	; (80020f0 <HAL_RCC_ClockConfig+0x260>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	497f      	ldr	r1, [pc, #508]	; (80020f0 <HAL_RCC_ClockConfig+0x260>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 80dc 	beq.w	80020bc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d13c      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xf6>
 8001f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f10:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d102      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xa6>
 8001f30:	4b6f      	ldr	r3, [pc, #444]	; (80020f0 <HAL_RCC_ClockConfig+0x260>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	e00f      	b.n	8001f56 <HAL_RCC_ClockConfig+0xc6>
 8001f36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	667b      	str	r3, [r7, #100]	; 0x64
 8001f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f48:	663b      	str	r3, [r7, #96]	; 0x60
 8001f4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f52:	4b67      	ldr	r3, [pc, #412]	; (80020f0 <HAL_RCC_ClockConfig+0x260>)
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f5a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f5e:	fa92 f2a2 	rbit	r2, r2
 8001f62:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f66:	fab2 f282 	clz	r2, r2
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	f042 0220 	orr.w	r2, r2, #32
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	f002 021f 	and.w	r2, r2, #31
 8001f76:	2101      	movs	r1, #1
 8001f78:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d17b      	bne.n	800207a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e0f3      	b.n	800216e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d13c      	bne.n	8002008 <HAL_RCC_ClockConfig+0x178>
 8001f8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	095b      	lsrs	r3, r3, #5
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d102      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x128>
 8001fb2:	4b4f      	ldr	r3, [pc, #316]	; (80020f0 <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	e00f      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x148>
 8001fb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fbc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8001fc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fca:	643b      	str	r3, [r7, #64]	; 0x40
 8001fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd4:	4b46      	ldr	r3, [pc, #280]	; (80020f0 <HAL_RCC_ClockConfig+0x260>)
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fdc:	63ba      	str	r2, [r7, #56]	; 0x38
 8001fde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fe0:	fa92 f2a2 	rbit	r2, r2
 8001fe4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fe8:	fab2 f282 	clz	r2, r2
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	f042 0220 	orr.w	r2, r2, #32
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	f002 021f 	and.w	r2, r2, #31
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d13a      	bne.n	800207a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0b2      	b.n	800216e <HAL_RCC_ClockConfig+0x2de>
 8002008:	2302      	movs	r3, #2
 800200a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	095b      	lsrs	r3, r3, #5
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b01      	cmp	r3, #1
 8002028:	d102      	bne.n	8002030 <HAL_RCC_ClockConfig+0x1a0>
 800202a:	4b31      	ldr	r3, [pc, #196]	; (80020f0 <HAL_RCC_ClockConfig+0x260>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	e00d      	b.n	800204c <HAL_RCC_ClockConfig+0x1bc>
 8002030:	2302      	movs	r3, #2
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
 800203c:	2302      	movs	r3, #2
 800203e:	623b      	str	r3, [r7, #32]
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	61fb      	str	r3, [r7, #28]
 8002048:	4b29      	ldr	r3, [pc, #164]	; (80020f0 <HAL_RCC_ClockConfig+0x260>)
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	2202      	movs	r2, #2
 800204e:	61ba      	str	r2, [r7, #24]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	fa92 f2a2 	rbit	r2, r2
 8002056:	617a      	str	r2, [r7, #20]
  return result;
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	fab2 f282 	clz	r2, r2
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	f042 0220 	orr.w	r2, r2, #32
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	f002 021f 	and.w	r2, r2, #31
 800206a:	2101      	movs	r1, #1
 800206c:	fa01 f202 	lsl.w	r2, r1, r2
 8002070:	4013      	ands	r3, r2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e079      	b.n	800216e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_RCC_ClockConfig+0x260>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f023 0203 	bic.w	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	491a      	ldr	r1, [pc, #104]	; (80020f0 <HAL_RCC_ClockConfig+0x260>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800208c:	f7fe fba4 	bl	80007d8 <HAL_GetTick>
 8002090:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	e00a      	b.n	80020aa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002094:	f7fe fba0 	bl	80007d8 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e061      	b.n	800216e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_RCC_ClockConfig+0x260>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 020c 	and.w	r2, r3, #12
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d1eb      	bne.n	8002094 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_RCC_ClockConfig+0x25c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d214      	bcs.n	80020f4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <HAL_RCC_ClockConfig+0x25c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 0207 	bic.w	r2, r3, #7
 80020d2:	4906      	ldr	r1, [pc, #24]	; (80020ec <HAL_RCC_ClockConfig+0x25c>)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b04      	ldr	r3, [pc, #16]	; (80020ec <HAL_RCC_ClockConfig+0x25c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e040      	b.n	800216e <HAL_RCC_ClockConfig+0x2de>
 80020ec:	40022000 	.word	0x40022000
 80020f0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002100:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <HAL_RCC_ClockConfig+0x2e8>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	491a      	ldr	r1, [pc, #104]	; (8002178 <HAL_RCC_ClockConfig+0x2e8>)
 800210e:	4313      	orrs	r3, r2
 8002110:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d009      	beq.n	8002132 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800211e:	4b16      	ldr	r3, [pc, #88]	; (8002178 <HAL_RCC_ClockConfig+0x2e8>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4912      	ldr	r1, [pc, #72]	; (8002178 <HAL_RCC_ClockConfig+0x2e8>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002132:	f000 f829 	bl	8002188 <HAL_RCC_GetSysClockFreq>
 8002136:	4601      	mov	r1, r0
 8002138:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <HAL_RCC_ClockConfig+0x2e8>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002140:	22f0      	movs	r2, #240	; 0xf0
 8002142:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	fa92 f2a2 	rbit	r2, r2
 800214a:	60fa      	str	r2, [r7, #12]
  return result;
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	fab2 f282 	clz	r2, r2
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	40d3      	lsrs	r3, r2
 8002156:	4a09      	ldr	r2, [pc, #36]	; (800217c <HAL_RCC_ClockConfig+0x2ec>)
 8002158:	5cd3      	ldrb	r3, [r2, r3]
 800215a:	fa21 f303 	lsr.w	r3, r1, r3
 800215e:	4a08      	ldr	r2, [pc, #32]	; (8002180 <HAL_RCC_ClockConfig+0x2f0>)
 8002160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <HAL_RCC_ClockConfig+0x2f4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe faf2 	bl	8000750 <HAL_InitTick>
  
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3778      	adds	r7, #120	; 0x78
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
 800217c:	08003d68 	.word	0x08003d68
 8002180:	20000000 	.word	0x20000000
 8002184:	20000004 	.word	0x20000004

08002188 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002188:	b480      	push	{r7}
 800218a:	b08b      	sub	sp, #44	; 0x2c
 800218c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021a2:	4b29      	ldr	r3, [pc, #164]	; (8002248 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d002      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0x30>
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d003      	beq.n	80021be <HAL_RCC_GetSysClockFreq+0x36>
 80021b6:	e03c      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021b8:	4b24      	ldr	r3, [pc, #144]	; (800224c <HAL_RCC_GetSysClockFreq+0xc4>)
 80021ba:	623b      	str	r3, [r7, #32]
      break;
 80021bc:	e03c      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80021c4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80021c8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	fa92 f2a2 	rbit	r2, r2
 80021d0:	607a      	str	r2, [r7, #4]
  return result;
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	fab2 f282 	clz	r2, r2
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	40d3      	lsrs	r3, r2
 80021dc:	4a1c      	ldr	r2, [pc, #112]	; (8002250 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80021e2:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	220f      	movs	r2, #15
 80021ec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	fa92 f2a2 	rbit	r2, r2
 80021f4:	60fa      	str	r2, [r7, #12]
  return result;
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	fab2 f282 	clz	r2, r2
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	40d3      	lsrs	r3, r2
 8002200:	4a14      	ldr	r2, [pc, #80]	; (8002254 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002202:	5cd3      	ldrb	r3, [r2, r3]
 8002204:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002210:	4a0e      	ldr	r2, [pc, #56]	; (800224c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	fbb2 f2f3 	udiv	r2, r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
 8002220:	e004      	b.n	800222c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	623b      	str	r3, [r7, #32]
      break;
 8002230:	e002      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002234:	623b      	str	r3, [r7, #32]
      break;
 8002236:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002238:	6a3b      	ldr	r3, [r7, #32]
}
 800223a:	4618      	mov	r0, r3
 800223c:	372c      	adds	r7, #44	; 0x2c
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	007a1200 	.word	0x007a1200
 8002250:	08003d80 	.word	0x08003d80
 8002254:	08003d90 	.word	0x08003d90
 8002258:	003d0900 	.word	0x003d0900

0800225c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_RCC_GetHCLKFreq+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000000 	.word	0x20000000

08002274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800227a:	f7ff ffef 	bl	800225c <HAL_RCC_GetHCLKFreq>
 800227e:	4601      	mov	r1, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002288:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800228c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	fa92 f2a2 	rbit	r2, r2
 8002294:	603a      	str	r2, [r7, #0]
  return result;
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	fab2 f282 	clz	r2, r2
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	40d3      	lsrs	r3, r2
 80022a0:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80022a2:	5cd3      	ldrb	r3, [r2, r3]
 80022a4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08003d78 	.word	0x08003d78

080022b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80022be:	f7ff ffcd 	bl	800225c <HAL_RCC_GetHCLKFreq>
 80022c2:	4601      	mov	r1, r0
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80022cc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80022d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	fa92 f2a2 	rbit	r2, r2
 80022d8:	603a      	str	r2, [r7, #0]
  return result;
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	fab2 f282 	clz	r2, r2
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	40d3      	lsrs	r3, r2
 80022e4:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80022e6:	5cd3      	ldrb	r3, [r2, r3]
 80022e8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08003d78 	.word	0x08003d78

080022fc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b092      	sub	sp, #72	; 0x48
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800230c:	2300      	movs	r3, #0
 800230e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80d4 	beq.w	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002320:	4b4e      	ldr	r3, [pc, #312]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10e      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232c:	4b4b      	ldr	r3, [pc, #300]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	4a4a      	ldr	r2, [pc, #296]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002336:	61d3      	str	r3, [r2, #28]
 8002338:	4b48      	ldr	r3, [pc, #288]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002344:	2301      	movs	r3, #1
 8002346:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234a:	4b45      	ldr	r3, [pc, #276]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d118      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002356:	4b42      	ldr	r3, [pc, #264]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a41      	ldr	r2, [pc, #260]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800235c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002360:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002362:	f7fe fa39 	bl	80007d8 <HAL_GetTick>
 8002366:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002368:	e008      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236a:	f7fe fa35 	bl	80007d8 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b64      	cmp	r3, #100	; 0x64
 8002376:	d901      	bls.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e14b      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	4b38      	ldr	r3, [pc, #224]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002388:	4b34      	ldr	r3, [pc, #208]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002390:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 8084 	beq.w	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d07c      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023a8:	4b2c      	ldr	r3, [pc, #176]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b26      	ldr	r3, [pc, #152]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023cc:	4413      	add	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	461a      	mov	r2, r3
 80023d2:	2301      	movs	r3, #1
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	461a      	mov	r2, r3
 80023f6:	2300      	movs	r3, #0
 80023f8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023fa:	4a18      	ldr	r2, [pc, #96]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023fe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d04b      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7fe f9e5 	bl	80007d8 <HAL_GetTick>
 800240e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7fe f9e1 	bl	80007d8 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0f5      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002428:	2302      	movs	r3, #2
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
 8002434:	2302      	movs	r3, #2
 8002436:	623b      	str	r3, [r7, #32]
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	61fb      	str	r3, [r7, #28]
  return result;
 8002440:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	b2db      	uxtb	r3, r3
 800244c:	f043 0302 	orr.w	r3, r3, #2
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d108      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002456:	4b01      	ldr	r3, [pc, #4]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	e00d      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800245c:	40021000 	.word	0x40021000
 8002460:	40007000 	.word	0x40007000
 8002464:	10908100 	.word	0x10908100
 8002468:	2302      	movs	r3, #2
 800246a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	4b69      	ldr	r3, [pc, #420]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	2202      	movs	r2, #2
 800247a:	613a      	str	r2, [r7, #16]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	fa92 f2a2 	rbit	r2, r2
 8002482:	60fa      	str	r2, [r7, #12]
  return result;
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	fab2 f282 	clz	r2, r2
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	f002 021f 	and.w	r2, r2, #31
 8002496:	2101      	movs	r1, #1
 8002498:	fa01 f202 	lsl.w	r2, r1, r2
 800249c:	4013      	ands	r3, r2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0b7      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024a2:	4b5e      	ldr	r3, [pc, #376]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	495b      	ldr	r1, [pc, #364]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d105      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024bc:	4b57      	ldr	r3, [pc, #348]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	4a56      	ldr	r2, [pc, #344]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024d4:	4b51      	ldr	r3, [pc, #324]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	f023 0203 	bic.w	r2, r3, #3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	494e      	ldr	r1, [pc, #312]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d008      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024f2:	4b4a      	ldr	r3, [pc, #296]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f023 0210 	bic.w	r2, r3, #16
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	4947      	ldr	r1, [pc, #284]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002500:	4313      	orrs	r3, r2
 8002502:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002510:	4b42      	ldr	r3, [pc, #264]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	493f      	ldr	r1, [pc, #252]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d008      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800252e:	4b3b      	ldr	r3, [pc, #236]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f023 0220 	bic.w	r2, r3, #32
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	4938      	ldr	r1, [pc, #224]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800253c:	4313      	orrs	r3, r2
 800253e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800254c:	4b33      	ldr	r3, [pc, #204]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	4930      	ldr	r1, [pc, #192]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800255a:	4313      	orrs	r3, r2
 800255c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800256a:	4b2c      	ldr	r3, [pc, #176]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	4929      	ldr	r1, [pc, #164]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002588:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	4921      	ldr	r1, [pc, #132]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002596:	4313      	orrs	r3, r2
 8002598:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025a6:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	491a      	ldr	r1, [pc, #104]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80025c4:	4b15      	ldr	r3, [pc, #84]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	4912      	ldr	r1, [pc, #72]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ee:	490b      	ldr	r1, [pc, #44]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	4903      	ldr	r1, [pc, #12]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800260e:	4313      	orrs	r3, r2
 8002610:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3748      	adds	r7, #72	; 0x48
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000

08002620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e040      	b.n	80026b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fd ff82 	bl	800054c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2224      	movs	r2, #36	; 0x24
 800264c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fcca 	bl	8002ff8 <UART_SetConfig>
 8002664:	4603      	mov	r3, r0
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e022      	b.n	80026b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fdf4 	bl	8003264 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800268a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800269a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 fe7b 	bl	80033a8 <UART_CheckIdleState>
 80026b2:	4603      	mov	r3, r0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08a      	sub	sp, #40	; 0x28
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026d0:	2b20      	cmp	r3, #32
 80026d2:	d178      	bne.n	80027c6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_UART_Transmit+0x24>
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e071      	b.n	80027c8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2221      	movs	r2, #33	; 0x21
 80026f0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026f2:	f7fe f871 	bl	80007d8 <HAL_GetTick>
 80026f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	88fa      	ldrh	r2, [r7, #6]
 80026fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	88fa      	ldrh	r2, [r7, #6]
 8002704:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002710:	d108      	bne.n	8002724 <HAL_UART_Transmit+0x68>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d104      	bne.n	8002724 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	e003      	b.n	800272c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800272c:	e030      	b.n	8002790 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2200      	movs	r2, #0
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 fedd 	bl	80034f8 <UART_WaitOnFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d004      	beq.n	800274e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e03c      	b.n	80027c8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10b      	bne.n	800276c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	881a      	ldrh	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002760:	b292      	uxth	r2, r2
 8002762:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	3302      	adds	r3, #2
 8002768:	61bb      	str	r3, [r7, #24]
 800276a:	e008      	b.n	800277e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	b292      	uxth	r2, r2
 8002776:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	3301      	adds	r3, #1
 800277c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1c8      	bne.n	800272e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2200      	movs	r2, #0
 80027a4:	2140      	movs	r1, #64	; 0x40
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fea6 	bl	80034f8 <UART_WaitOnFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d004      	beq.n	80027bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2220      	movs	r2, #32
 80027b6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e005      	b.n	80027c8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2220      	movs	r2, #32
 80027c0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e000      	b.n	80027c8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80027c6:	2302      	movs	r3, #2
  }
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3720      	adds	r7, #32
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	f040 80b6 	bne.w	8002958 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_UART_Receive+0x28>
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0ae      	b.n	800295a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2222      	movs	r2, #34	; 0x22
 8002808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002812:	f7fd ffe1 	bl	80007d8 <HAL_GetTick>
 8002816:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	88fa      	ldrh	r2, [r7, #6]
 800281c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	88fa      	ldrh	r2, [r7, #6]
 8002824:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002830:	d10e      	bne.n	8002850 <HAL_UART_Receive+0x80>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d105      	bne.n	8002846 <HAL_UART_Receive+0x76>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002840:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002844:	e02d      	b.n	80028a2 <HAL_UART_Receive+0xd2>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	22ff      	movs	r2, #255	; 0xff
 800284a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800284e:	e028      	b.n	80028a2 <HAL_UART_Receive+0xd2>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10d      	bne.n	8002874 <HAL_UART_Receive+0xa4>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d104      	bne.n	800286a <HAL_UART_Receive+0x9a>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	22ff      	movs	r2, #255	; 0xff
 8002864:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002868:	e01b      	b.n	80028a2 <HAL_UART_Receive+0xd2>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	227f      	movs	r2, #127	; 0x7f
 800286e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002872:	e016      	b.n	80028a2 <HAL_UART_Receive+0xd2>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800287c:	d10d      	bne.n	800289a <HAL_UART_Receive+0xca>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d104      	bne.n	8002890 <HAL_UART_Receive+0xc0>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	227f      	movs	r2, #127	; 0x7f
 800288a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800288e:	e008      	b.n	80028a2 <HAL_UART_Receive+0xd2>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	223f      	movs	r2, #63	; 0x3f
 8002894:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002898:	e003      	b.n	80028a2 <HAL_UART_Receive+0xd2>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80028a8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b2:	d108      	bne.n	80028c6 <HAL_UART_Receive+0xf6>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d104      	bne.n	80028c6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	61bb      	str	r3, [r7, #24]
 80028c4:	e003      	b.n	80028ce <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80028ce:	e037      	b.n	8002940 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2200      	movs	r2, #0
 80028d8:	2120      	movs	r1, #32
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 fe0c 	bl	80034f8 <UART_WaitOnFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e033      	b.n	800295a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10c      	bne.n	8002912 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80028fe:	b29a      	uxth	r2, r3
 8002900:	8a7b      	ldrh	r3, [r7, #18]
 8002902:	4013      	ands	r3, r2
 8002904:	b29a      	uxth	r2, r3
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	3302      	adds	r3, #2
 800290e:	61bb      	str	r3, [r7, #24]
 8002910:	e00d      	b.n	800292e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002918:	b29b      	uxth	r3, r3
 800291a:	b2da      	uxtb	r2, r3
 800291c:	8a7b      	ldrh	r3, [r7, #18]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	4013      	ands	r3, r2
 8002922:	b2da      	uxtb	r2, r3
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	3301      	adds	r3, #1
 800292c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002934:	b29b      	uxth	r3, r3
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1c1      	bne.n	80028d0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	e000      	b.n	800295a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002958:	2302      	movs	r3, #2
  }
}
 800295a:	4618      	mov	r0, r3
 800295c:	3720      	adds	r7, #32
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b08a      	sub	sp, #40	; 0x28
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	4613      	mov	r3, r2
 800296e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002976:	2b20      	cmp	r3, #32
 8002978:	d132      	bne.n	80029e0 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <HAL_UART_Receive_IT+0x24>
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e02b      	b.n	80029e2 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d018      	beq.n	80029d0 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	e853 3f00 	ldrex	r3, [r3]
 80029aa:	613b      	str	r3, [r7, #16]
   return(result);
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	623b      	str	r3, [r7, #32]
 80029be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c0:	69f9      	ldr	r1, [r7, #28]
 80029c2:	6a3a      	ldr	r2, [r7, #32]
 80029c4:	e841 2300 	strex	r3, r2, [r1]
 80029c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1e6      	bne.n	800299e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	461a      	mov	r2, r3
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fdf6 	bl	80035c8 <UART_Start_Receive_IT>
 80029dc:	4603      	mov	r3, r0
 80029de:	e000      	b.n	80029e2 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80029e0:	2302      	movs	r3, #2
  }
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3728      	adds	r7, #40	; 0x28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b0ba      	sub	sp, #232	; 0xe8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002a16:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002a20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d115      	bne.n	8002a54 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00f      	beq.n	8002a54 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d009      	beq.n	8002a54 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 82ab 	beq.w	8002fa0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4798      	blx	r3
      }
      return;
 8002a52:	e2a5      	b.n	8002fa0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8117 	beq.w	8002c8c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d106      	bne.n	8002a78 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a6e:	4b85      	ldr	r3, [pc, #532]	; (8002c84 <HAL_UART_IRQHandler+0x298>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 810a 	beq.w	8002c8c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d011      	beq.n	8002aa8 <HAL_UART_IRQHandler+0xbc>
 8002a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00b      	beq.n	8002aa8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2201      	movs	r2, #1
 8002a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a9e:	f043 0201 	orr.w	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d011      	beq.n	8002ad8 <HAL_UART_IRQHandler+0xec>
 8002ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00b      	beq.n	8002ad8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ace:	f043 0204 	orr.w	r2, r3, #4
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d011      	beq.n	8002b08 <HAL_UART_IRQHandler+0x11c>
 8002ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00b      	beq.n	8002b08 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2204      	movs	r2, #4
 8002af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002afe:	f043 0202 	orr.w	r2, r3, #2
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d017      	beq.n	8002b44 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b24:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00b      	beq.n	8002b44 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2208      	movs	r2, #8
 8002b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b3a:	f043 0208 	orr.w	r2, r3, #8
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d012      	beq.n	8002b76 <HAL_UART_IRQHandler+0x18a>
 8002b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00c      	beq.n	8002b76 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b6c:	f043 0220 	orr.w	r2, r3, #32
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 8211 	beq.w	8002fa4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00d      	beq.n	8002baa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b40      	cmp	r3, #64	; 0x40
 8002bc0:	d005      	beq.n	8002bce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002bc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d04f      	beq.n	8002c6e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fdc0 	bl	8003754 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bde:	2b40      	cmp	r3, #64	; 0x40
 8002be0:	d141      	bne.n	8002c66 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3308      	adds	r3, #8
 8002be8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bf0:	e853 3f00 	ldrex	r3, [r3]
 8002bf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002bf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3308      	adds	r3, #8
 8002c0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c1e:	e841 2300 	strex	r3, r2, [r1]
 8002c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1d9      	bne.n	8002be2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d013      	beq.n	8002c5e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3a:	4a13      	ldr	r2, [pc, #76]	; (8002c88 <HAL_UART_IRQHandler+0x29c>)
 8002c3c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd ff1e 	bl	8000a84 <HAL_DMA_Abort_IT>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d017      	beq.n	8002c7e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5c:	e00f      	b.n	8002c7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f9b4 	bl	8002fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c64:	e00b      	b.n	8002c7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f9b0 	bl	8002fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c6c:	e007      	b.n	8002c7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f9ac 	bl	8002fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002c7c:	e192      	b.n	8002fa4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7e:	bf00      	nop
    return;
 8002c80:	e190      	b.n	8002fa4 <HAL_UART_IRQHandler+0x5b8>
 8002c82:	bf00      	nop
 8002c84:	04000120 	.word	0x04000120
 8002c88:	0800381d 	.word	0x0800381d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	f040 814b 	bne.w	8002f2c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 8144 	beq.w	8002f2c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 813d 	beq.w	8002f2c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc4:	2b40      	cmp	r3, #64	; 0x40
 8002cc6:	f040 80b5 	bne.w	8002e34 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cd6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8164 	beq.w	8002fa8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cea:	429a      	cmp	r2, r3
 8002cec:	f080 815c 	bcs.w	8002fa8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cf6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	f000 8086 	beq.w	8002e12 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d12:	e853 3f00 	ldrex	r3, [r3]
 8002d16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d34:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d38:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d40:	e841 2300 	strex	r3, r2, [r1]
 8002d44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1da      	bne.n	8002d06 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3308      	adds	r3, #8
 8002d56:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d5a:	e853 3f00 	ldrex	r3, [r3]
 8002d5e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3308      	adds	r3, #8
 8002d70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d74:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d78:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d80:	e841 2300 	strex	r3, r2, [r1]
 8002d84:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1e1      	bne.n	8002d50 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3308      	adds	r3, #8
 8002d92:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d96:	e853 3f00 	ldrex	r3, [r3]
 8002d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3308      	adds	r3, #8
 8002dac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002db0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002db2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002db6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002db8:	e841 2300 	strex	r3, r2, [r1]
 8002dbc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002dbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1e3      	bne.n	8002d8c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dda:	e853 3f00 	ldrex	r3, [r3]
 8002dde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de2:	f023 0310 	bic.w	r3, r3, #16
 8002de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002df4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002df6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dfc:	e841 2300 	strex	r3, r2, [r1]
 8002e00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1e4      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fd fe00 	bl	8000a12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2202      	movs	r2, #2
 8002e16:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f8d7 	bl	8002fe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e32:	e0b9      	b.n	8002fa8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80ab 	beq.w	8002fac <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002e56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 80a6 	beq.w	8002fac <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e68:	e853 3f00 	ldrex	r3, [r3]
 8002e6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e82:	647b      	str	r3, [r7, #68]	; 0x44
 8002e84:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e8a:	e841 2300 	strex	r3, r2, [r1]
 8002e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e4      	bne.n	8002e60 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3308      	adds	r3, #8
 8002eb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002eba:	633a      	str	r2, [r7, #48]	; 0x30
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ec2:	e841 2300 	strex	r3, r2, [r1]
 8002ec6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1e3      	bne.n	8002e96 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	e853 3f00 	ldrex	r3, [r3]
 8002eee:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0310 	bic.w	r3, r3, #16
 8002ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f08:	69b9      	ldr	r1, [r7, #24]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	e841 2300 	strex	r3, r2, [r1]
 8002f10:	617b      	str	r3, [r7, #20]
   return(result);
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e4      	bne.n	8002ee2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f22:	4619      	mov	r1, r3
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f85b 	bl	8002fe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f2a:	e03f      	b.n	8002fac <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00e      	beq.n	8002f56 <HAL_UART_IRQHandler+0x56a>
 8002f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fe4c 	bl	8003bec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f54:	e02d      	b.n	8002fb2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00e      	beq.n	8002f80 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d01c      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
    }
    return;
 8002f7e:	e017      	b.n	8002fb0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d012      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x5c6>
 8002f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00c      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fc55 	bl	8003848 <UART_EndTransmit_IT>
    return;
 8002f9e:	e008      	b.n	8002fb2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002fa0:	bf00      	nop
 8002fa2:	e006      	b.n	8002fb2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002fa4:	bf00      	nop
 8002fa6:	e004      	b.n	8002fb2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002fa8:	bf00      	nop
 8002faa:	e002      	b.n	8002fb2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002fac:	bf00      	nop
 8002fae:	e000      	b.n	8002fb2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002fb0:	bf00      	nop
  }

}
 8002fb2:	37e8      	adds	r7, #232	; 0xe8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	4b8a      	ldr	r3, [pc, #552]	; (800324c <UART_SetConfig+0x254>)
 8003024:	4013      	ands	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	6979      	ldr	r1, [r7, #20]
 800302c:	430b      	orrs	r3, r1
 800302e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	430a      	orrs	r2, r1
 8003068:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a78      	ldr	r2, [pc, #480]	; (8003250 <UART_SetConfig+0x258>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d120      	bne.n	80030b6 <UART_SetConfig+0xbe>
 8003074:	4b77      	ldr	r3, [pc, #476]	; (8003254 <UART_SetConfig+0x25c>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	2b03      	cmp	r3, #3
 800307e:	d817      	bhi.n	80030b0 <UART_SetConfig+0xb8>
 8003080:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <UART_SetConfig+0x90>)
 8003082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003086:	bf00      	nop
 8003088:	08003099 	.word	0x08003099
 800308c:	080030a5 	.word	0x080030a5
 8003090:	080030ab 	.word	0x080030ab
 8003094:	0800309f 	.word	0x0800309f
 8003098:	2300      	movs	r3, #0
 800309a:	77fb      	strb	r3, [r7, #31]
 800309c:	e01d      	b.n	80030da <UART_SetConfig+0xe2>
 800309e:	2302      	movs	r3, #2
 80030a0:	77fb      	strb	r3, [r7, #31]
 80030a2:	e01a      	b.n	80030da <UART_SetConfig+0xe2>
 80030a4:	2304      	movs	r3, #4
 80030a6:	77fb      	strb	r3, [r7, #31]
 80030a8:	e017      	b.n	80030da <UART_SetConfig+0xe2>
 80030aa:	2308      	movs	r3, #8
 80030ac:	77fb      	strb	r3, [r7, #31]
 80030ae:	e014      	b.n	80030da <UART_SetConfig+0xe2>
 80030b0:	2310      	movs	r3, #16
 80030b2:	77fb      	strb	r3, [r7, #31]
 80030b4:	e011      	b.n	80030da <UART_SetConfig+0xe2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a67      	ldr	r2, [pc, #412]	; (8003258 <UART_SetConfig+0x260>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d102      	bne.n	80030c6 <UART_SetConfig+0xce>
 80030c0:	2300      	movs	r3, #0
 80030c2:	77fb      	strb	r3, [r7, #31]
 80030c4:	e009      	b.n	80030da <UART_SetConfig+0xe2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a64      	ldr	r2, [pc, #400]	; (800325c <UART_SetConfig+0x264>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d102      	bne.n	80030d6 <UART_SetConfig+0xde>
 80030d0:	2300      	movs	r3, #0
 80030d2:	77fb      	strb	r3, [r7, #31]
 80030d4:	e001      	b.n	80030da <UART_SetConfig+0xe2>
 80030d6:	2310      	movs	r3, #16
 80030d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e2:	d15a      	bne.n	800319a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80030e4:	7ffb      	ldrb	r3, [r7, #31]
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d827      	bhi.n	800313a <UART_SetConfig+0x142>
 80030ea:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <UART_SetConfig+0xf8>)
 80030ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f0:	08003115 	.word	0x08003115
 80030f4:	0800311d 	.word	0x0800311d
 80030f8:	08003125 	.word	0x08003125
 80030fc:	0800313b 	.word	0x0800313b
 8003100:	0800312b 	.word	0x0800312b
 8003104:	0800313b 	.word	0x0800313b
 8003108:	0800313b 	.word	0x0800313b
 800310c:	0800313b 	.word	0x0800313b
 8003110:	08003133 	.word	0x08003133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003114:	f7ff f8ae 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 8003118:	61b8      	str	r0, [r7, #24]
        break;
 800311a:	e013      	b.n	8003144 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800311c:	f7ff f8cc 	bl	80022b8 <HAL_RCC_GetPCLK2Freq>
 8003120:	61b8      	str	r0, [r7, #24]
        break;
 8003122:	e00f      	b.n	8003144 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003124:	4b4e      	ldr	r3, [pc, #312]	; (8003260 <UART_SetConfig+0x268>)
 8003126:	61bb      	str	r3, [r7, #24]
        break;
 8003128:	e00c      	b.n	8003144 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800312a:	f7ff f82d 	bl	8002188 <HAL_RCC_GetSysClockFreq>
 800312e:	61b8      	str	r0, [r7, #24]
        break;
 8003130:	e008      	b.n	8003144 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003136:	61bb      	str	r3, [r7, #24]
        break;
 8003138:	e004      	b.n	8003144 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	77bb      	strb	r3, [r7, #30]
        break;
 8003142:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d074      	beq.n	8003234 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	005a      	lsls	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	085b      	lsrs	r3, r3, #1
 8003154:	441a      	add	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	fbb2 f3f3 	udiv	r3, r2, r3
 800315e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	2b0f      	cmp	r3, #15
 8003164:	d916      	bls.n	8003194 <UART_SetConfig+0x19c>
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316c:	d212      	bcs.n	8003194 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	b29b      	uxth	r3, r3
 8003172:	f023 030f 	bic.w	r3, r3, #15
 8003176:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	b29b      	uxth	r3, r3
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	b29a      	uxth	r2, r3
 8003184:	89fb      	ldrh	r3, [r7, #14]
 8003186:	4313      	orrs	r3, r2
 8003188:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	89fa      	ldrh	r2, [r7, #14]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	e04f      	b.n	8003234 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	77bb      	strb	r3, [r7, #30]
 8003198:	e04c      	b.n	8003234 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800319a:	7ffb      	ldrb	r3, [r7, #31]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d828      	bhi.n	80031f2 <UART_SetConfig+0x1fa>
 80031a0:	a201      	add	r2, pc, #4	; (adr r2, 80031a8 <UART_SetConfig+0x1b0>)
 80031a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a6:	bf00      	nop
 80031a8:	080031cd 	.word	0x080031cd
 80031ac:	080031d5 	.word	0x080031d5
 80031b0:	080031dd 	.word	0x080031dd
 80031b4:	080031f3 	.word	0x080031f3
 80031b8:	080031e3 	.word	0x080031e3
 80031bc:	080031f3 	.word	0x080031f3
 80031c0:	080031f3 	.word	0x080031f3
 80031c4:	080031f3 	.word	0x080031f3
 80031c8:	080031eb 	.word	0x080031eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031cc:	f7ff f852 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 80031d0:	61b8      	str	r0, [r7, #24]
        break;
 80031d2:	e013      	b.n	80031fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031d4:	f7ff f870 	bl	80022b8 <HAL_RCC_GetPCLK2Freq>
 80031d8:	61b8      	str	r0, [r7, #24]
        break;
 80031da:	e00f      	b.n	80031fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031dc:	4b20      	ldr	r3, [pc, #128]	; (8003260 <UART_SetConfig+0x268>)
 80031de:	61bb      	str	r3, [r7, #24]
        break;
 80031e0:	e00c      	b.n	80031fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031e2:	f7fe ffd1 	bl	8002188 <HAL_RCC_GetSysClockFreq>
 80031e6:	61b8      	str	r0, [r7, #24]
        break;
 80031e8:	e008      	b.n	80031fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ee:	61bb      	str	r3, [r7, #24]
        break;
 80031f0:	e004      	b.n	80031fc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	77bb      	strb	r3, [r7, #30]
        break;
 80031fa:	bf00      	nop
    }

    if (pclk != 0U)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d018      	beq.n	8003234 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	085a      	lsrs	r2, r3, #1
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	441a      	add	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b0f      	cmp	r3, #15
 800321a:	d909      	bls.n	8003230 <UART_SetConfig+0x238>
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003222:	d205      	bcs.n	8003230 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	b29a      	uxth	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	e001      	b.n	8003234 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003240:	7fbb      	ldrb	r3, [r7, #30]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	efff69f3 	.word	0xefff69f3
 8003250:	40013800 	.word	0x40013800
 8003254:	40021000 	.word	0x40021000
 8003258:	40004400 	.word	0x40004400
 800325c:	40004800 	.word	0x40004800
 8003260:	007a1200 	.word	0x007a1200

08003264 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00a      	beq.n	800328e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00a      	beq.n	8003316 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01a      	beq.n	800337a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003362:	d10a      	bne.n	800337a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	605a      	str	r2, [r3, #4]
  }
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b098      	sub	sp, #96	; 0x60
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033b8:	f7fd fa0e 	bl	80007d8 <HAL_GetTick>
 80033bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d12e      	bne.n	800342a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033d4:	2200      	movs	r2, #0
 80033d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f88c 	bl	80034f8 <UART_WaitOnFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d021      	beq.n	800342a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ee:	e853 3f00 	ldrex	r3, [r3]
 80033f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033fa:	653b      	str	r3, [r7, #80]	; 0x50
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003404:	647b      	str	r3, [r7, #68]	; 0x44
 8003406:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003408:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800340a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800340c:	e841 2300 	strex	r3, r2, [r1]
 8003410:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1e6      	bne.n	80033e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e062      	b.n	80034f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b04      	cmp	r3, #4
 8003436:	d149      	bne.n	80034cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003438:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003440:	2200      	movs	r2, #0
 8003442:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f856 	bl	80034f8 <UART_WaitOnFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d03c      	beq.n	80034cc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	623b      	str	r3, [r7, #32]
   return(result);
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003470:	633b      	str	r3, [r7, #48]	; 0x30
 8003472:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003474:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003478:	e841 2300 	strex	r3, r2, [r1]
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800347e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e6      	bne.n	8003452 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3308      	adds	r3, #8
 800348a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	e853 3f00 	ldrex	r3, [r3]
 8003492:	60fb      	str	r3, [r7, #12]
   return(result);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0301 	bic.w	r3, r3, #1
 800349a:	64bb      	str	r3, [r7, #72]	; 0x48
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3308      	adds	r3, #8
 80034a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034a4:	61fa      	str	r2, [r7, #28]
 80034a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a8:	69b9      	ldr	r1, [r7, #24]
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	e841 2300 	strex	r3, r2, [r1]
 80034b0:	617b      	str	r3, [r7, #20]
   return(result);
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e5      	bne.n	8003484 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e011      	b.n	80034f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3758      	adds	r7, #88	; 0x58
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003508:	e049      	b.n	800359e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003510:	d045      	beq.n	800359e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003512:	f7fd f961 	bl	80007d8 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	429a      	cmp	r2, r3
 8003520:	d302      	bcc.n	8003528 <UART_WaitOnFlagUntilTimeout+0x30>
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e048      	b.n	80035be <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	d031      	beq.n	800359e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b08      	cmp	r3, #8
 8003546:	d110      	bne.n	800356a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2208      	movs	r2, #8
 800354e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f8ff 	bl	8003754 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2208      	movs	r2, #8
 800355a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e029      	b.n	80035be <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003578:	d111      	bne.n	800359e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003582:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f8e5 	bl	8003754 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e00f      	b.n	80035be <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4013      	ands	r3, r2
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	bf0c      	ite	eq
 80035ae:	2301      	moveq	r3, #1
 80035b0:	2300      	movne	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d0a6      	beq.n	800350a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b097      	sub	sp, #92	; 0x5c
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	4613      	mov	r3, r2
 80035d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	88fa      	ldrh	r2, [r7, #6]
 80035e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	88fa      	ldrh	r2, [r7, #6]
 80035e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035fa:	d10e      	bne.n	800361a <UART_Start_Receive_IT+0x52>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d105      	bne.n	8003610 <UART_Start_Receive_IT+0x48>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f240 12ff 	movw	r2, #511	; 0x1ff
 800360a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800360e:	e02d      	b.n	800366c <UART_Start_Receive_IT+0xa4>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	22ff      	movs	r2, #255	; 0xff
 8003614:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003618:	e028      	b.n	800366c <UART_Start_Receive_IT+0xa4>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10d      	bne.n	800363e <UART_Start_Receive_IT+0x76>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d104      	bne.n	8003634 <UART_Start_Receive_IT+0x6c>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	22ff      	movs	r2, #255	; 0xff
 800362e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003632:	e01b      	b.n	800366c <UART_Start_Receive_IT+0xa4>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	227f      	movs	r2, #127	; 0x7f
 8003638:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800363c:	e016      	b.n	800366c <UART_Start_Receive_IT+0xa4>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003646:	d10d      	bne.n	8003664 <UART_Start_Receive_IT+0x9c>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d104      	bne.n	800365a <UART_Start_Receive_IT+0x92>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	227f      	movs	r2, #127	; 0x7f
 8003654:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003658:	e008      	b.n	800366c <UART_Start_Receive_IT+0xa4>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	223f      	movs	r2, #63	; 0x3f
 800365e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003662:	e003      	b.n	800366c <UART_Start_Receive_IT+0xa4>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2222      	movs	r2, #34	; 0x22
 8003678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3308      	adds	r3, #8
 8003682:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003686:	e853 3f00 	ldrex	r3, [r3]
 800368a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800368c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	657b      	str	r3, [r7, #84]	; 0x54
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3308      	adds	r3, #8
 800369a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800369c:	64ba      	str	r2, [r7, #72]	; 0x48
 800369e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036a4:	e841 2300 	strex	r3, r2, [r1]
 80036a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80036aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e5      	bne.n	800367c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b8:	d107      	bne.n	80036ca <UART_Start_Receive_IT+0x102>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d103      	bne.n	80036ca <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4a21      	ldr	r2, [pc, #132]	; (800374c <UART_Start_Receive_IT+0x184>)
 80036c6:	669a      	str	r2, [r3, #104]	; 0x68
 80036c8:	e002      	b.n	80036d0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4a20      	ldr	r2, [pc, #128]	; (8003750 <UART_Start_Receive_IT+0x188>)
 80036ce:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d019      	beq.n	800370c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	e853 3f00 	ldrex	r3, [r3]
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80036ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f6:	637b      	str	r3, [r7, #52]	; 0x34
 80036f8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036fe:	e841 2300 	strex	r3, r2, [r1]
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1e6      	bne.n	80036d8 <UART_Start_Receive_IT+0x110>
 800370a:	e018      	b.n	800373e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	e853 3f00 	ldrex	r3, [r3]
 8003718:	613b      	str	r3, [r7, #16]
   return(result);
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f043 0320 	orr.w	r3, r3, #32
 8003720:	653b      	str	r3, [r7, #80]	; 0x50
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800372a:	623b      	str	r3, [r7, #32]
 800372c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372e:	69f9      	ldr	r1, [r7, #28]
 8003730:	6a3a      	ldr	r2, [r7, #32]
 8003732:	e841 2300 	strex	r3, r2, [r1]
 8003736:	61bb      	str	r3, [r7, #24]
   return(result);
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1e6      	bne.n	800370c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	375c      	adds	r7, #92	; 0x5c
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	08003a45 	.word	0x08003a45
 8003750:	0800389d 	.word	0x0800389d

08003754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003754:	b480      	push	{r7}
 8003756:	b095      	sub	sp, #84	; 0x54
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003764:	e853 3f00 	ldrex	r3, [r3]
 8003768:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003770:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800377a:	643b      	str	r3, [r7, #64]	; 0x40
 800377c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003780:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003782:	e841 2300 	strex	r3, r2, [r1]
 8003786:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1e6      	bne.n	800375c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3308      	adds	r3, #8
 8003794:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	e853 3f00 	ldrex	r3, [r3]
 800379c:	61fb      	str	r3, [r7, #28]
   return(result);
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f023 0301 	bic.w	r3, r3, #1
 80037a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3308      	adds	r3, #8
 80037ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037b6:	e841 2300 	strex	r3, r2, [r1]
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1e5      	bne.n	800378e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d118      	bne.n	80037fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	e853 3f00 	ldrex	r3, [r3]
 80037d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f023 0310 	bic.w	r3, r3, #16
 80037de:	647b      	str	r3, [r7, #68]	; 0x44
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	461a      	mov	r2, r3
 80037e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ec:	6979      	ldr	r1, [r7, #20]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	e841 2300 	strex	r3, r2, [r1]
 80037f4:	613b      	str	r3, [r7, #16]
   return(result);
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e6      	bne.n	80037ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003810:	bf00      	nop
 8003812:	3754      	adds	r7, #84	; 0x54
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f7ff fbc6 	bl	8002fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003840:	bf00      	nop
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b088      	sub	sp, #32
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	e853 3f00 	ldrex	r3, [r3]
 800385c:	60bb      	str	r3, [r7, #8]
   return(result);
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	61bb      	str	r3, [r7, #24]
 8003870:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	6979      	ldr	r1, [r7, #20]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	613b      	str	r3, [r7, #16]
   return(result);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e6      	bne.n	8003850 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff fb92 	bl	8002fb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003894:	bf00      	nop
 8003896:	3720      	adds	r7, #32
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b09c      	sub	sp, #112	; 0x70
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80038aa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038b4:	2b22      	cmp	r3, #34	; 0x22
 80038b6:	f040 80b9 	bne.w	8003a2c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80038c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80038c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80038c8:	b2d9      	uxtb	r1, r3
 80038ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d4:	400a      	ands	r2, r1
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f040 809c 	bne.w	8003a3c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390c:	e853 3f00 	ldrex	r3, [r3]
 8003910:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003914:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003918:	66bb      	str	r3, [r7, #104]	; 0x68
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003922:	65bb      	str	r3, [r7, #88]	; 0x58
 8003924:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003928:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800392a:	e841 2300 	strex	r3, r2, [r1]
 800392e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1e6      	bne.n	8003904 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3308      	adds	r3, #8
 800393c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003940:	e853 3f00 	ldrex	r3, [r3]
 8003944:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	667b      	str	r3, [r7, #100]	; 0x64
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3308      	adds	r3, #8
 8003954:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003956:	647a      	str	r2, [r7, #68]	; 0x44
 8003958:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800395c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800395e:	e841 2300 	strex	r3, r2, [r1]
 8003962:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1e5      	bne.n	8003936 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d018      	beq.n	80039be <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	e853 3f00 	ldrex	r3, [r3]
 8003998:	623b      	str	r3, [r7, #32]
   return(result);
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039a0:	663b      	str	r3, [r7, #96]	; 0x60
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039aa:	633b      	str	r3, [r7, #48]	; 0x30
 80039ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b2:	e841 2300 	strex	r3, r2, [r1]
 80039b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1e6      	bne.n	800398c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d12e      	bne.n	8003a24 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	e853 3f00 	ldrex	r3, [r3]
 80039d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f023 0310 	bic.w	r3, r3, #16
 80039e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ea:	61fb      	str	r3, [r7, #28]
 80039ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ee:	69b9      	ldr	r1, [r7, #24]
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	e841 2300 	strex	r3, r2, [r1]
 80039f6:	617b      	str	r3, [r7, #20]
   return(result);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1e6      	bne.n	80039cc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b10      	cmp	r3, #16
 8003a0a:	d103      	bne.n	8003a14 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2210      	movs	r2, #16
 8003a12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff fadf 	bl	8002fe0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a22:	e00b      	b.n	8003a3c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7fc fd11 	bl	800044c <HAL_UART_RxCpltCallback>
}
 8003a2a:	e007      	b.n	8003a3c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0208 	orr.w	r2, r2, #8
 8003a3a:	619a      	str	r2, [r3, #24]
}
 8003a3c:	bf00      	nop
 8003a3e:	3770      	adds	r7, #112	; 0x70
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b09c      	sub	sp, #112	; 0x70
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a52:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a5c:	2b22      	cmp	r3, #34	; 0x22
 8003a5e:	f040 80b9 	bne.w	8003bd4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a68:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003a72:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003a76:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a80:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a86:	1c9a      	adds	r2, r3, #2
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f040 809c 	bne.w	8003be4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab4:	e853 3f00 	ldrex	r3, [r3]
 8003ab8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003abc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ac0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aca:	657b      	str	r3, [r7, #84]	; 0x54
 8003acc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003ad0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ad2:	e841 2300 	strex	r3, r2, [r1]
 8003ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1e6      	bne.n	8003aac <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	f023 0301 	bic.w	r3, r3, #1
 8003af4:	663b      	str	r3, [r7, #96]	; 0x60
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3308      	adds	r3, #8
 8003afc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003afe:	643a      	str	r2, [r7, #64]	; 0x40
 8003b00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e5      	bne.n	8003ade <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d018      	beq.n	8003b66 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b54:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e6      	bne.n	8003b34 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d12e      	bne.n	8003bcc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	e853 3f00 	ldrex	r3, [r3]
 8003b80:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f023 0310 	bic.w	r3, r3, #16
 8003b88:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b96:	6979      	ldr	r1, [r7, #20]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	e841 2300 	strex	r3, r2, [r1]
 8003b9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1e6      	bne.n	8003b74 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d103      	bne.n	8003bbc <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2210      	movs	r2, #16
 8003bba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff fa0b 	bl	8002fe0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003bca:	e00b      	b.n	8003be4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7fc fc3d 	bl	800044c <HAL_UART_RxCpltCallback>
}
 8003bd2:	e007      	b.n	8003be4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699a      	ldr	r2, [r3, #24]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0208 	orr.w	r2, r2, #8
 8003be2:	619a      	str	r2, [r3, #24]
}
 8003be4:	bf00      	nop
 8003be6:	3770      	adds	r7, #112	; 0x70
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <__libc_init_array>:
 8003c00:	b570      	push	{r4, r5, r6, lr}
 8003c02:	4d0d      	ldr	r5, [pc, #52]	; (8003c38 <__libc_init_array+0x38>)
 8003c04:	4c0d      	ldr	r4, [pc, #52]	; (8003c3c <__libc_init_array+0x3c>)
 8003c06:	1b64      	subs	r4, r4, r5
 8003c08:	10a4      	asrs	r4, r4, #2
 8003c0a:	2600      	movs	r6, #0
 8003c0c:	42a6      	cmp	r6, r4
 8003c0e:	d109      	bne.n	8003c24 <__libc_init_array+0x24>
 8003c10:	4d0b      	ldr	r5, [pc, #44]	; (8003c40 <__libc_init_array+0x40>)
 8003c12:	4c0c      	ldr	r4, [pc, #48]	; (8003c44 <__libc_init_array+0x44>)
 8003c14:	f000 f820 	bl	8003c58 <_init>
 8003c18:	1b64      	subs	r4, r4, r5
 8003c1a:	10a4      	asrs	r4, r4, #2
 8003c1c:	2600      	movs	r6, #0
 8003c1e:	42a6      	cmp	r6, r4
 8003c20:	d105      	bne.n	8003c2e <__libc_init_array+0x2e>
 8003c22:	bd70      	pop	{r4, r5, r6, pc}
 8003c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c28:	4798      	blx	r3
 8003c2a:	3601      	adds	r6, #1
 8003c2c:	e7ee      	b.n	8003c0c <__libc_init_array+0xc>
 8003c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c32:	4798      	blx	r3
 8003c34:	3601      	adds	r6, #1
 8003c36:	e7f2      	b.n	8003c1e <__libc_init_array+0x1e>
 8003c38:	08003da0 	.word	0x08003da0
 8003c3c:	08003da0 	.word	0x08003da0
 8003c40:	08003da0 	.word	0x08003da0
 8003c44:	08003da4 	.word	0x08003da4

08003c48 <memset>:
 8003c48:	4402      	add	r2, r0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d100      	bne.n	8003c52 <memset+0xa>
 8003c50:	4770      	bx	lr
 8003c52:	f803 1b01 	strb.w	r1, [r3], #1
 8003c56:	e7f9      	b.n	8003c4c <memset+0x4>

08003c58 <_init>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	bf00      	nop
 8003c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5e:	bc08      	pop	{r3}
 8003c60:	469e      	mov	lr, r3
 8003c62:	4770      	bx	lr

08003c64 <_fini>:
 8003c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c66:	bf00      	nop
 8003c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6a:	bc08      	pop	{r3}
 8003c6c:	469e      	mov	lr, r3
 8003c6e:	4770      	bx	lr
